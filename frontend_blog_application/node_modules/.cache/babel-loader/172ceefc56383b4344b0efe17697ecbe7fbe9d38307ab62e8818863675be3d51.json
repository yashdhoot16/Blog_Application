{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/html\n */\nimport { globalDocument } from \"../../constants.js\";\nimport { Dom } from \"../../dom/dom.js\";\nimport { toArray } from \"../array/to-array.js\";\nimport { trim } from \"../string/trim.js\";\n/**\n * The method automatically cleans up content from Microsoft Word and other HTML sources to ensure clean, compliant\n * content that matches the look and feel of the site.\n */\nexport function cleanFromWord(html) {\n  if (html.indexOf('<html ') !== -1) {\n    html = html.substring(html.indexOf('<html '), html.length);\n    html = html.substring(0, html.lastIndexOf('</html>') + '</html>'.length);\n  }\n  let convertedString = '';\n  try {\n    const div = globalDocument.createElement('div');\n    div.innerHTML = html;\n    const marks = [];\n    if (div.firstChild) {\n      Dom.each(div, node => {\n        if (!node) {\n          return;\n        }\n        switch (node.nodeType) {\n          case Node.ELEMENT_NODE:\n            switch (node.nodeName) {\n              case 'STYLE':\n              case 'LINK':\n              case 'META':\n                marks.push(node);\n                break;\n              case 'W:SDT':\n              case 'W:SDTPR':\n              case 'FONT':\n                Dom.unwrap(node);\n                break;\n              default:\n                toArray(node.attributes).forEach(attr => {\n                  if (['src', 'href', 'rel', 'content'].indexOf(attr.name.toLowerCase()) === -1) {\n                    node.removeAttribute(attr.name);\n                  }\n                });\n            }\n            break;\n          case Node.TEXT_NODE:\n            break;\n          default:\n            marks.push(node);\n        }\n      });\n    }\n    Dom.safeRemove.apply(null, marks);\n    convertedString = div.innerHTML;\n  } catch (e) {}\n  if (convertedString) {\n    html = convertedString;\n  }\n  html = html.split(/(\\n)/).filter(trim).join('\\n');\n  return html.replace(/<(\\/)?(html|colgroup|col|o:p)[^>]*>/g, '').replace(/<!--[^>]*>/g, '');\n}","map":{"version":3,"names":["globalDocument","Dom","toArray","trim","cleanFromWord","html","indexOf","substring","length","lastIndexOf","convertedString","div","createElement","innerHTML","marks","firstChild","each","node","nodeType","Node","ELEMENT_NODE","nodeName","push","unwrap","attributes","forEach","attr","name","toLowerCase","removeAttribute","TEXT_NODE","safeRemove","apply","e","split","filter","join","replace"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/html/clean-from-word.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/html\n */\nimport { globalDocument } from \"../../constants.js\";\nimport { Dom } from \"../../dom/dom.js\";\nimport { toArray } from \"../array/to-array.js\";\nimport { trim } from \"../string/trim.js\";\n/**\n * The method automatically cleans up content from Microsoft Word and other HTML sources to ensure clean, compliant\n * content that matches the look and feel of the site.\n */\nexport function cleanFromWord(html) {\n    if (html.indexOf('<html ') !== -1) {\n        html = html.substring(html.indexOf('<html '), html.length);\n        html = html.substring(0, html.lastIndexOf('</html>') + '</html>'.length);\n    }\n    let convertedString = '';\n    try {\n        const div = globalDocument.createElement('div');\n        div.innerHTML = html;\n        const marks = [];\n        if (div.firstChild) {\n            Dom.each(div, node => {\n                if (!node) {\n                    return;\n                }\n                switch (node.nodeType) {\n                    case Node.ELEMENT_NODE:\n                        switch (node.nodeName) {\n                            case 'STYLE':\n                            case 'LINK':\n                            case 'META':\n                                marks.push(node);\n                                break;\n                            case 'W:SDT':\n                            case 'W:SDTPR':\n                            case 'FONT':\n                                Dom.unwrap(node);\n                                break;\n                            default:\n                                toArray(node.attributes).forEach((attr) => {\n                                    if ([\n                                        'src',\n                                        'href',\n                                        'rel',\n                                        'content'\n                                    ].indexOf(attr.name.toLowerCase()) === -1) {\n                                        node.removeAttribute(attr.name);\n                                    }\n                                });\n                        }\n                        break;\n                    case Node.TEXT_NODE:\n                        break;\n                    default:\n                        marks.push(node);\n                }\n            });\n        }\n        Dom.safeRemove.apply(null, marks);\n        convertedString = div.innerHTML;\n    }\n    catch (e) { }\n    if (convertedString) {\n        html = convertedString;\n    }\n    html = html.split(/(\\n)/).filter(trim).join('\\n');\n    return html\n        .replace(/<(\\/)?(html|colgroup|col|o:p)[^>]*>/g, '')\n        .replace(/<!--[^>]*>/g, '');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,oBAAoB;AACnD,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,IAAI,QAAQ,mBAAmB;AACxC;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAE;EAChC,IAAIA,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;IAC/BD,IAAI,GAAGA,IAAI,CAACE,SAAS,CAACF,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAED,IAAI,CAACG,MAAM,CAAC;IAC1DH,IAAI,GAAGA,IAAI,CAACE,SAAS,CAAC,CAAC,EAAEF,IAAI,CAACI,WAAW,CAAC,SAAS,CAAC,GAAG,SAAS,CAACD,MAAM,CAAC;EAC5E;EACA,IAAIE,eAAe,GAAG,EAAE;EACxB,IAAI;IACA,MAAMC,GAAG,GAAGX,cAAc,CAACY,aAAa,CAAC,KAAK,CAAC;IAC/CD,GAAG,CAACE,SAAS,GAAGR,IAAI;IACpB,MAAMS,KAAK,GAAG,EAAE;IAChB,IAAIH,GAAG,CAACI,UAAU,EAAE;MAChBd,GAAG,CAACe,IAAI,CAACL,GAAG,EAAEM,IAAI,IAAI;QAClB,IAAI,CAACA,IAAI,EAAE;UACP;QACJ;QACA,QAAQA,IAAI,CAACC,QAAQ;UACjB,KAAKC,IAAI,CAACC,YAAY;YAClB,QAAQH,IAAI,CAACI,QAAQ;cACjB,KAAK,OAAO;cACZ,KAAK,MAAM;cACX,KAAK,MAAM;gBACPP,KAAK,CAACQ,IAAI,CAACL,IAAI,CAAC;gBAChB;cACJ,KAAK,OAAO;cACZ,KAAK,SAAS;cACd,KAAK,MAAM;gBACPhB,GAAG,CAACsB,MAAM,CAACN,IAAI,CAAC;gBAChB;cACJ;gBACIf,OAAO,CAACe,IAAI,CAACO,UAAU,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;kBACvC,IAAI,CACA,KAAK,EACL,MAAM,EACN,KAAK,EACL,SAAS,CACZ,CAACpB,OAAO,CAACoB,IAAI,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBACvCX,IAAI,CAACY,eAAe,CAACH,IAAI,CAACC,IAAI,CAAC;kBACnC;gBACJ,CAAC,CAAC;YACV;YACA;UACJ,KAAKR,IAAI,CAACW,SAAS;YACf;UACJ;YACIhB,KAAK,CAACQ,IAAI,CAACL,IAAI,CAAC;QACxB;MACJ,CAAC,CAAC;IACN;IACAhB,GAAG,CAAC8B,UAAU,CAACC,KAAK,CAAC,IAAI,EAAElB,KAAK,CAAC;IACjCJ,eAAe,GAAGC,GAAG,CAACE,SAAS;EACnC,CAAC,CACD,OAAOoB,CAAC,EAAE,CAAE;EACZ,IAAIvB,eAAe,EAAE;IACjBL,IAAI,GAAGK,eAAe;EAC1B;EACAL,IAAI,GAAGA,IAAI,CAAC6B,KAAK,CAAC,MAAM,CAAC,CAACC,MAAM,CAAChC,IAAI,CAAC,CAACiC,IAAI,CAAC,IAAI,CAAC;EACjD,OAAO/B,IAAI,CACNgC,OAAO,CAAC,sCAAsC,EAAE,EAAE,CAAC,CACnDA,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
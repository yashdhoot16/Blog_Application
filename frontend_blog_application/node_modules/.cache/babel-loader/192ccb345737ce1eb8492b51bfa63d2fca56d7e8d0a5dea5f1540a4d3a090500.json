{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { Async } from \"../async/index.js\";\nimport { STATUSES } from \"./statuses.js\";\nimport { uniqueUid } from \"../global.js\";\nimport { get, getClassName, isFunction, isVoid, kebabCase } from \"../helpers/index.js\";\nconst StatusListHandlers = new Map();\n/**\n * The base class of all Jodit UI components. Provides work with a life cycle.\n */\nexport class Component {\n  get componentName() {\n    if (!this.__componentName) {\n      this.__componentName = 'jodit-' + kebabCase((isFunction(this.className) ? this.className() : '') || getClassName(this));\n    }\n    return this.__componentName;\n  }\n  getFullElName(elementName, mod, modValue) {\n    const result = [this.componentName];\n    if (elementName) {\n      elementName = elementName.replace(/[^a-z0-9-]/gi, '-');\n      result.push(`__${elementName}`);\n    }\n    if (mod) {\n      result.push('_', mod);\n      result.push('_', isVoid(modValue) ? 'true' : modValue.toString());\n    }\n    return result.join('');\n  }\n  /**\n   * The document in which jodit was created\n   */\n  get ownerDocument() {\n    return this.ow.document;\n  }\n  /**\n   * Shortcut for `this.ownerDocument`\n   */\n  get od() {\n    return this.ownerDocument;\n  }\n  get ow() {\n    return this.ownerWindow;\n  }\n  /**\n   * Safe get any field\n   * @example\n   * ```js\n   * private a = {\n   * \tb: {\n   * \t\tc: {\n   * \t\t\te: {\n   * \t\t\t\tg: {\n   * \t\t\t\t\tcolor: 'red'\n   * \t\t\t\t}\n   * \t\t\t}\n   * \t\t}\n   * \t}\n   * }\n   *\n   * this.get('a.b.c.e.g.color'); // Safe access to color\n   * // instead using optionsl chaining\n   * this?.a?.b?.c?.e?.g?.color\n   * ```\n   *\n   * @param chain - the path to be traversed in the obj object\n   * @param obj - the object in which the value is searched\n   */\n  get(chain, obj) {\n    return get(chain, obj || this);\n  }\n  /**\n   * Component is ready for work\n   */\n  get isReady() {\n    return this.componentStatus === STATUSES.ready;\n  }\n  /**\n   * Component was destructed\n   */\n  get isDestructed() {\n    return this.componentStatus === STATUSES.destructed;\n  }\n  /**\n   * The component is currently undergoing destructuring or has already been destroyed.\n   * Those. you should not the app froze new events on him now or do anything else with him.\n   */\n  get isInDestruct() {\n    return STATUSES.beforeDestruct === this.componentStatus || STATUSES.destructed === this.componentStatus;\n  }\n  /**\n   * Bind destructor to some View\n   */\n  bindDestruct(component) {\n    component.hookStatus(STATUSES.beforeDestruct, () => !this.isInDestruct && this.destruct());\n    return this;\n  }\n  constructor() {\n    this.async = new Async();\n    /**\n     * The window in which jodit was created\n     */\n    this.ownerWindow = window;\n    this.__componentStatus = STATUSES.beforeInit;\n    this.uid = 'jodit-uid-' + uniqueUid();\n  }\n  /**\n   * Destruct component method\n   */\n  destruct() {\n    this.setStatus(STATUSES.destructed);\n    if (this.async) {\n      this.async.destruct();\n      // @ts-ignore\n      this.async = undefined;\n    }\n    if (StatusListHandlers.get(this)) {\n      StatusListHandlers.delete(this);\n    }\n    // @ts-ignore\n    this.ownerWindow = undefined;\n  }\n  /**\n   * Current component status\n   */\n  get componentStatus() {\n    return this.__componentStatus;\n  }\n  /**\n   * Setter for current component status\n   */\n  set componentStatus(componentStatus) {\n    this.setStatus(componentStatus);\n  }\n  /**\n   * Set component status\n   * @param componentStatus - component status\n   * @see ComponentStatus\n   */\n  setStatus(componentStatus) {\n    return this.setStatusComponent(componentStatus, this);\n  }\n  /**\n   * Set status recursively on all parents\n   */\n  setStatusComponent(componentStatus, component) {\n    if (componentStatus === this.__componentStatus) {\n      return;\n    }\n    if (component === this) {\n      this.__componentStatus = componentStatus;\n    }\n    const proto = Object.getPrototypeOf(this);\n    if (proto && isFunction(proto.setStatusComponent)) {\n      proto.setStatusComponent(componentStatus, component);\n    }\n    const statuses = StatusListHandlers.get(this),\n      list = statuses === null || statuses === void 0 ? void 0 : statuses[componentStatus];\n    if (list && list.length) {\n      list.forEach(cb => cb(component));\n    }\n  }\n  /**\n   * Adds a handler for changing the component's status\n   *\n   * @param status - the status at which the callback is triggered\n   * @param callback - a function that will be called when the status is `status`\n   */\n  hookStatus(status, callback) {\n    let list = StatusListHandlers.get(this);\n    if (!list) {\n      list = {};\n      StatusListHandlers.set(this, list);\n    }\n    if (!list[status]) {\n      list[status] = [];\n    }\n    list[status].push(callback);\n  }\n  static isInstanceOf(c, constructorFunc) {\n    return c instanceof constructorFunc;\n  }\n}\nComponent.STATUSES = STATUSES;","map":{"version":3,"names":["Async","STATUSES","uniqueUid","get","getClassName","isFunction","isVoid","kebabCase","StatusListHandlers","Map","Component","componentName","__componentName","className","getFullElName","elementName","mod","modValue","result","replace","push","toString","join","ownerDocument","ow","document","od","ownerWindow","chain","obj","isReady","componentStatus","ready","isDestructed","destructed","isInDestruct","beforeDestruct","bindDestruct","component","hookStatus","destruct","constructor","async","window","__componentStatus","beforeInit","uid","setStatus","undefined","delete","setStatusComponent","proto","Object","getPrototypeOf","statuses","list","length","forEach","cb","status","callback","set","isInstanceOf","c","constructorFunc"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/component/component.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { Async } from \"../async/index.js\";\nimport { STATUSES } from \"./statuses.js\";\nimport { uniqueUid } from \"../global.js\";\nimport { get, getClassName, isFunction, isVoid, kebabCase } from \"../helpers/index.js\";\nconst StatusListHandlers = new Map();\n/**\n * The base class of all Jodit UI components. Provides work with a life cycle.\n */\nexport class Component {\n    get componentName() {\n        if (!this.__componentName) {\n            this.__componentName =\n                'jodit-' +\n                    kebabCase((isFunction(this.className) ? this.className() : '') ||\n                        getClassName(this));\n        }\n        return this.__componentName;\n    }\n    getFullElName(elementName, mod, modValue) {\n        const result = [this.componentName];\n        if (elementName) {\n            elementName = elementName.replace(/[^a-z0-9-]/gi, '-');\n            result.push(`__${elementName}`);\n        }\n        if (mod) {\n            result.push('_', mod);\n            result.push('_', isVoid(modValue) ? 'true' : modValue.toString());\n        }\n        return result.join('');\n    }\n    /**\n     * The document in which jodit was created\n     */\n    get ownerDocument() {\n        return this.ow.document;\n    }\n    /**\n     * Shortcut for `this.ownerDocument`\n     */\n    get od() {\n        return this.ownerDocument;\n    }\n    get ow() {\n        return this.ownerWindow;\n    }\n    /**\n     * Safe get any field\n     * @example\n     * ```js\n     * private a = {\n     * \tb: {\n     * \t\tc: {\n     * \t\t\te: {\n     * \t\t\t\tg: {\n     * \t\t\t\t\tcolor: 'red'\n     * \t\t\t\t}\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * }\n     *\n     * this.get('a.b.c.e.g.color'); // Safe access to color\n     * // instead using optionsl chaining\n     * this?.a?.b?.c?.e?.g?.color\n     * ```\n     *\n     * @param chain - the path to be traversed in the obj object\n     * @param obj - the object in which the value is searched\n     */\n    get(chain, obj) {\n        return get(chain, obj || this);\n    }\n    /**\n     * Component is ready for work\n     */\n    get isReady() {\n        return this.componentStatus === STATUSES.ready;\n    }\n    /**\n     * Component was destructed\n     */\n    get isDestructed() {\n        return this.componentStatus === STATUSES.destructed;\n    }\n    /**\n     * The component is currently undergoing destructuring or has already been destroyed.\n     * Those. you should not the app froze new events on him now or do anything else with him.\n     */\n    get isInDestruct() {\n        return (STATUSES.beforeDestruct === this.componentStatus ||\n            STATUSES.destructed === this.componentStatus);\n    }\n    /**\n     * Bind destructor to some View\n     */\n    bindDestruct(component) {\n        component.hookStatus(STATUSES.beforeDestruct, () => !this.isInDestruct && this.destruct());\n        return this;\n    }\n    constructor() {\n        this.async = new Async();\n        /**\n         * The window in which jodit was created\n         */\n        this.ownerWindow = window;\n        this.__componentStatus = STATUSES.beforeInit;\n        this.uid = 'jodit-uid-' + uniqueUid();\n    }\n    /**\n     * Destruct component method\n     */\n    destruct() {\n        this.setStatus(STATUSES.destructed);\n        if (this.async) {\n            this.async.destruct();\n            // @ts-ignore\n            this.async = undefined;\n        }\n        if (StatusListHandlers.get(this)) {\n            StatusListHandlers.delete(this);\n        }\n        // @ts-ignore\n        this.ownerWindow = undefined;\n    }\n    /**\n     * Current component status\n     */\n    get componentStatus() {\n        return this.__componentStatus;\n    }\n    /**\n     * Setter for current component status\n     */\n    set componentStatus(componentStatus) {\n        this.setStatus(componentStatus);\n    }\n    /**\n     * Set component status\n     * @param componentStatus - component status\n     * @see ComponentStatus\n     */\n    setStatus(componentStatus) {\n        return this.setStatusComponent(componentStatus, this);\n    }\n    /**\n     * Set status recursively on all parents\n     */\n    setStatusComponent(componentStatus, component) {\n        if (componentStatus === this.__componentStatus) {\n            return;\n        }\n        if (component === this) {\n            this.__componentStatus = componentStatus;\n        }\n        const proto = Object.getPrototypeOf(this);\n        if (proto && isFunction(proto.setStatusComponent)) {\n            proto.setStatusComponent(componentStatus, component);\n        }\n        const statuses = StatusListHandlers.get(this), list = statuses === null || statuses === void 0 ? void 0 : statuses[componentStatus];\n        if (list && list.length) {\n            list.forEach(cb => cb(component));\n        }\n    }\n    /**\n     * Adds a handler for changing the component's status\n     *\n     * @param status - the status at which the callback is triggered\n     * @param callback - a function that will be called when the status is `status`\n     */\n    hookStatus(status, callback) {\n        let list = StatusListHandlers.get(this);\n        if (!list) {\n            list = {};\n            StatusListHandlers.set(this, list);\n        }\n        if (!list[status]) {\n            list[status] = [];\n        }\n        list[status].push(callback);\n    }\n    static isInstanceOf(c, constructorFunc) {\n        return c instanceof constructorFunc;\n    }\n}\nComponent.STATUSES = STATUSES;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/normalize\n */\nimport { colorToHex } from \"../color/color-to-hex.js\";\nimport { trim } from \"../string/trim.js\";\n/**\n * Convert rgba and short HEX color to Full text color. #fff to #FFFFFF\n *\n * @param colorInput - string like rgba(red, green, blue, alpha) or rgb(red, green, blue) or #fff or #ffffff\n * @returns HEX color, false - for transparent color\n */\nexport const normalizeColor = colorInput => {\n  const newcolor = ['#'];\n  let color = colorToHex(colorInput);\n  if (!color) {\n    return false;\n  }\n  color = trim(color.toUpperCase());\n  color = color.substring(1);\n  if (color.length === 3) {\n    for (let i = 0; i < 3; i += 1) {\n      newcolor.push(color[i]);\n      newcolor.push(color[i]);\n    }\n    return newcolor.join('');\n  }\n  if (color.length > 6) {\n    color = color.slice(0, 6);\n  }\n  return '#' + color;\n};","map":{"version":3,"names":["colorToHex","trim","normalizeColor","colorInput","newcolor","color","toUpperCase","substring","length","i","push","join","slice"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/normalize/normalize-color.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/normalize\n */\nimport { colorToHex } from \"../color/color-to-hex.js\";\nimport { trim } from \"../string/trim.js\";\n/**\n * Convert rgba and short HEX color to Full text color. #fff to #FFFFFF\n *\n * @param colorInput - string like rgba(red, green, blue, alpha) or rgb(red, green, blue) or #fff or #ffffff\n * @returns HEX color, false - for transparent color\n */\nexport const normalizeColor = (colorInput) => {\n    const newcolor = ['#'];\n    let color = colorToHex(colorInput);\n    if (!color) {\n        return false;\n    }\n    color = trim(color.toUpperCase());\n    color = color.substring(1);\n    if (color.length === 3) {\n        for (let i = 0; i < 3; i += 1) {\n            newcolor.push(color[i]);\n            newcolor.push(color[i]);\n        }\n        return newcolor.join('');\n    }\n    if (color.length > 6) {\n        color = color.slice(0, 6);\n    }\n    return '#' + color;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,0BAA0B;AACrD,SAASC,IAAI,QAAQ,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,UAAU,IAAK;EAC1C,MAAMC,QAAQ,GAAG,CAAC,GAAG,CAAC;EACtB,IAAIC,KAAK,GAAGL,UAAU,CAACG,UAAU,CAAC;EAClC,IAAI,CAACE,KAAK,EAAE;IACR,OAAO,KAAK;EAChB;EACAA,KAAK,GAAGJ,IAAI,CAACI,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC;EACjCD,KAAK,GAAGA,KAAK,CAACE,SAAS,CAAC,CAAC,CAAC;EAC1B,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MAC3BL,QAAQ,CAACM,IAAI,CAACL,KAAK,CAACI,CAAC,CAAC,CAAC;MACvBL,QAAQ,CAACM,IAAI,CAACL,KAAK,CAACI,CAAC,CAAC,CAAC;IAC3B;IACA,OAAOL,QAAQ,CAACO,IAAI,CAAC,EAAE,CAAC;EAC5B;EACA,IAAIN,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;IAClBH,KAAK,GAAGA,KAAK,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC7B;EACA,OAAO,GAAG,GAAGP,KAAK;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
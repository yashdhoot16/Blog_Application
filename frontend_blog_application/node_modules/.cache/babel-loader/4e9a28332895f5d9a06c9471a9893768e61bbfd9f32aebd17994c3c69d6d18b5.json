{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YDHOOT\\\\Documents\\\\Spring Tool Suite Projects\\\\BlogApplication\\\\frontend_blog_application\\\\src\\\\pages\\\\user-routes\\\\Userdashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Base from \"./../../components/Base\";\nimport AddPost from \"../../components/AddPost\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { getCurrentUserDetail } from \"../../auth\";\nimport { loadPostsByUserId } from \"../../services/post_service\";\nimport Post from \"../../components/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Userdashboard = () => {\n  _s();\n  var _posts$content;\n  const [user, setUser] = useState({});\n  const [posts, setPosts] = useState({\n    content: [],\n    pageNumber: \"\",\n    pageSize: \"\",\n    totalPages: \"\",\n    totalElements: \"\",\n    lastPage: false\n  });\n  useEffect(() => {\n    console.log(getCurrentUserDetail());\n    setUser(getCurrentUserDetail());\n    loadPostsByUserId(getCurrentUserDetail().id).then(data => {\n      console.log(data);\n      setPosts(data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  // Method required for Pagination..\n  const changePage = (pageNumber = 0, pageSize = 5) => {\n    // Conditional logic for pagination..\n    if (pageNumber > postContent.pageNumber && postContent.lastPage) {\n      return;\n    }\n    if (pageNumber < postContent.pageNumber && postContent.pageNumber === 0) {\n      return;\n    }\n    loadPostByCategory(pageNumber, pageSize, categoryId).then(data => {\n      setPostContent(data);\n      console.log(data);\n    }).catch(error => {\n      toast.error(\"Error in loading posts !!\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Base, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(AddPost, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          sm: {\n            size: 10,\n            offset: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center mt-4\",\n            children: [\"Blog Count : \", posts ? posts.totalElements : 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), (_posts$content = posts.content) === null || _posts$content === void 0 ? void 0 : _posts$content.map(post => /*#__PURE__*/_jsxDEV(Post, {\n            post: post\n          }, post.postId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Userdashboard, \"2SQzPXvJBSJ9XGgiIIg8PudJ6yY=\");\n_c = Userdashboard;\nexport default Userdashboard;\nvar _c;\n$RefreshReg$(_c, \"Userdashboard\");","map":{"version":3,"names":["React","useEffect","useState","Base","AddPost","Col","Container","Row","getCurrentUserDetail","loadPostsByUserId","Post","jsxDEV","_jsxDEV","Userdashboard","_s","_posts$content","user","setUser","posts","setPosts","content","pageNumber","pageSize","totalPages","totalElements","lastPage","console","log","id","then","data","catch","error","changePage","postContent","loadPostByCategory","categoryId","setPostContent","toast","children","fileName","_jsxFileName","lineNumber","columnNumber","sm","size","offset","className","map","post","postId","_c","$RefreshReg$"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/src/pages/user-routes/Userdashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Base from \"./../../components/Base\";\r\nimport AddPost from \"../../components/AddPost\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport { getCurrentUserDetail } from \"../../auth\";\r\nimport { loadPostsByUserId } from \"../../services/post_service\";\r\nimport Post from \"../../components/Post\";\r\nconst Userdashboard = () => {\r\n  const [user, setUser] = useState({});\r\n\r\n  const [posts, setPosts] = useState({\r\n    content: [],\r\n    pageNumber: \"\",\r\n    pageSize: \"\",\r\n    totalPages: \"\",\r\n    totalElements: \"\",\r\n    lastPage: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(getCurrentUserDetail());\r\n\r\n    setUser(getCurrentUserDetail());\r\n\r\n    loadPostsByUserId(getCurrentUserDetail().id)\r\n      .then((data) => {\r\n        console.log(data);\r\n        setPosts(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  // Method required for Pagination..\r\n  const changePage = (pageNumber = 0, pageSize = 5) => {\r\n    // Conditional logic for pagination..\r\n    if (pageNumber > postContent.pageNumber && postContent.lastPage) {\r\n      return;\r\n    }\r\n    if (pageNumber < postContent.pageNumber && postContent.pageNumber === 0) {\r\n      return;\r\n    }\r\n\r\n    loadPostByCategory(pageNumber, pageSize, categoryId)\r\n      .then((data) => {\r\n        setPostContent(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Error in loading posts !!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Base>\r\n      <Container>\r\n        <AddPost />\r\n        <Row>\r\n          <Col sm={{ size: 10, offset: 1 }}>\r\n            <h3 className=\"text-center mt-4\">\r\n              Blog Count : {posts ? posts.totalElements : 0}\r\n            </h3>\r\n\r\n            {posts.content?.map((post) => (\r\n              <Post key={post.postId} post={post} />\r\n            ))}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default Userdashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
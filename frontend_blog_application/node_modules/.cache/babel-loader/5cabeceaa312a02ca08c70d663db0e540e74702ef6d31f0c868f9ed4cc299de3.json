{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/color\n */\n/**\n * Converts rgba text representation of color in hex\n *\n * @param color - string like rgba(red, green, blue, alpha) or rgb(red, green, blue)\n * @returns hex color view, NaN - for transparent color\n * @example\n * ```javascript\n * var p = document.createElement('p');\n * p.style.color = '#ffffff';\n * console.log(p.getAttribute('style')); // color: rgb(255, 255, 255);\n * console.log(colorTohex(p.style.color)); // #ffffff\n * ```\n */\nexport const colorToHex = color => {\n  if (color === 'rgba(0, 0, 0, 0)' || color === '') {\n    return false;\n  }\n  if (!color) {\n    return '#000000';\n  }\n  if (color.substr(0, 1) === '#') {\n    return color;\n  }\n  const digits = /([\\s\\n\\t\\r]*?)rgb\\((\\d+), (\\d+), (\\d+)\\)/.exec(color) || /([\\s\\n\\t\\r]*?)rgba\\((\\d+), (\\d+), (\\d+), ([\\d.]+)\\)/.exec(color);\n  if (!digits) {\n    return '#000000';\n  }\n  const red = parseInt(digits[2], 10),\n    green = parseInt(digits[3], 10),\n    blue = parseInt(digits[4], 10),\n    rgb = blue | green << 8 | red << 16;\n  let hex = rgb.toString(16).toUpperCase();\n  while (hex.length < 6) {\n    hex = '0' + hex;\n  }\n  return digits[1] + '#' + hex;\n};","map":{"version":3,"names":["colorToHex","color","substr","digits","exec","red","parseInt","green","blue","rgb","hex","toString","toUpperCase","length"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/color/color-to-hex.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/color\n */\n/**\n * Converts rgba text representation of color in hex\n *\n * @param color - string like rgba(red, green, blue, alpha) or rgb(red, green, blue)\n * @returns hex color view, NaN - for transparent color\n * @example\n * ```javascript\n * var p = document.createElement('p');\n * p.style.color = '#ffffff';\n * console.log(p.getAttribute('style')); // color: rgb(255, 255, 255);\n * console.log(colorTohex(p.style.color)); // #ffffff\n * ```\n */\nexport const colorToHex = (color) => {\n    if (color === 'rgba(0, 0, 0, 0)' || color === '') {\n        return false;\n    }\n    if (!color) {\n        return '#000000';\n    }\n    if (color.substr(0, 1) === '#') {\n        return color;\n    }\n    const digits = /([\\s\\n\\t\\r]*?)rgb\\((\\d+), (\\d+), (\\d+)\\)/.exec(color) ||\n        /([\\s\\n\\t\\r]*?)rgba\\((\\d+), (\\d+), (\\d+), ([\\d.]+)\\)/.exec(color);\n    if (!digits) {\n        return '#000000';\n    }\n    const red = parseInt(digits[2], 10), green = parseInt(digits[3], 10), blue = parseInt(digits[4], 10), rgb = blue | (green << 8) | (red << 16);\n    let hex = rgb.toString(16).toUpperCase();\n    while (hex.length < 6) {\n        hex = '0' + hex;\n    }\n    return digits[1] + '#' + hex;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,KAAK,IAAK;EACjC,IAAIA,KAAK,KAAK,kBAAkB,IAAIA,KAAK,KAAK,EAAE,EAAE;IAC9C,OAAO,KAAK;EAChB;EACA,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,SAAS;EACpB;EACA,IAAIA,KAAK,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;IAC5B,OAAOD,KAAK;EAChB;EACA,MAAME,MAAM,GAAG,0CAA0C,CAACC,IAAI,CAACH,KAAK,CAAC,IACjE,qDAAqD,CAACG,IAAI,CAACH,KAAK,CAAC;EACrE,IAAI,CAACE,MAAM,EAAE;IACT,OAAO,SAAS;EACpB;EACA,MAAME,GAAG,GAAGC,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAAEI,KAAK,GAAGD,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAAEK,IAAI,GAAGF,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAAEM,GAAG,GAAGD,IAAI,GAAID,KAAK,IAAI,CAAE,GAAIF,GAAG,IAAI,EAAG;EAC7I,IAAIK,GAAG,GAAGD,GAAG,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;EACxC,OAAOF,GAAG,CAACG,MAAM,GAAG,CAAC,EAAE;IACnBH,GAAG,GAAG,GAAG,GAAGA,GAAG;EACnB;EACA,OAAOP,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGO,GAAG;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
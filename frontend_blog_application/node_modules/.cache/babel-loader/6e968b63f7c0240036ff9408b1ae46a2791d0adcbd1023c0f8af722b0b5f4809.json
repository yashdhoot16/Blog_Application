{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { globalDocument, PASSIVE_EVENTS } from \"../constants.js\";\nimport { splitArray } from \"../helpers/array/split-array.js\";\nimport { isArray } from \"../helpers/checker/is-array.js\";\nimport { isFunction } from \"../helpers/checker/is-function.js\";\nimport { isString, isStringArray } from \"../helpers/checker/is-string.js\";\nimport { error } from \"../helpers/utils/error/index.js\";\nimport { defaultNameSpace, EventHandlersStore } from \"./store.js\";\n/**\n * The module editor's event manager\n */\nexport class EventEmitter {\n  mute(event) {\n    this.__mutedEvents.add(event !== null && event !== void 0 ? event : '*');\n    return this;\n  }\n  isMuted(event) {\n    if (event && this.__mutedEvents.has(event)) {\n      return true;\n    }\n    return this.__mutedEvents.has('*');\n  }\n  unmute(event) {\n    this.__mutedEvents.delete(event !== null && event !== void 0 ? event : '*');\n    return this;\n  }\n  __eachEvent(events, callback) {\n    const eventParts = splitArray(events).map(e => e.trim());\n    eventParts.forEach(eventNameSpace => {\n      const eventAndNameSpace = eventNameSpace.split('.');\n      const namespace = eventAndNameSpace[1] || defaultNameSpace;\n      callback.call(this, eventAndNameSpace[0], namespace);\n    });\n  }\n  __getStore(subject) {\n    if (!subject) {\n      throw error('Need subject');\n    }\n    if (subject[this.__key] === undefined) {\n      const store = new EventHandlersStore();\n      Object.defineProperty(subject, this.__key, {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: store\n      });\n    }\n    return subject[this.__key];\n  }\n  __removeStoreFromSubject(subject) {\n    if (subject[this.__key] !== undefined) {\n      Object.defineProperty(subject, this.__key, {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: undefined\n      });\n    }\n  }\n  __triggerNativeEvent(element, event) {\n    const evt = this.__doc.createEvent('HTMLEvents');\n    if (isString(event)) {\n      evt.initEvent(event, true, true);\n    } else {\n      evt.initEvent(event.type, event.bubbles, event.cancelable);\n      ['screenX', 'screenY', 'clientX', 'clientY', 'target', 'srcElement', 'currentTarget', 'timeStamp', 'which', 'keyCode'].forEach(property => {\n        Object.defineProperty(evt, property, {\n          value: event[property],\n          enumerable: true\n        });\n      });\n      Object.defineProperty(evt, 'originalEvent', {\n        value: event,\n        enumerable: true\n      });\n    }\n    element.dispatchEvent(evt);\n  }\n  /**\n   * Get current event name\n   *\n   * @example\n   * ```javascript\n   * parent.e.on('openDialog closeDialog', function () {\n   *     if (parent.e.current === 'closeDialog') {\n   *         alert('Dialog was closed');\n   *     } else {\n   *         alert('Dialog was opened');\n   *     }\n   * });\n   * ```\n   */\n  get current() {\n    return this.currents[this.currents.length - 1];\n  }\n  on(eventsOrSubjects, callbackOrEvents, optionsOrCallback, opts) {\n    let subjects;\n    let events;\n    let callback;\n    let options;\n    if (isString(eventsOrSubjects) || isStringArray(eventsOrSubjects)) {\n      subjects = this;\n      events = eventsOrSubjects;\n      callback = callbackOrEvents;\n      options = optionsOrCallback;\n    } else {\n      subjects = eventsOrSubjects;\n      events = callbackOrEvents;\n      callback = optionsOrCallback;\n      options = opts;\n    }\n    if (!(isString(events) || isStringArray(events)) || events.length === 0) {\n      throw error('Need events names');\n    }\n    if (!isFunction(callback)) {\n      throw error('Need event handler');\n    }\n    if (isArray(subjects)) {\n      subjects.forEach(subj => {\n        this.on(subj, events, callback, options);\n      });\n      return this;\n    }\n    const subject = subjects;\n    const store = this.__getStore(subject);\n    const self = this;\n    let syntheticCallback = function (event, ...args) {\n      if (self.isMuted(event)) {\n        return;\n      }\n      return callback && callback.call(this, ...args);\n    };\n    if (isDOMElement(subject)) {\n      syntheticCallback = function (event) {\n        if (self.isMuted(event.type)) {\n          return;\n        }\n        self.__prepareEvent(event);\n        if (callback && callback.call(this, event) === false) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          return false;\n        }\n        return;\n      };\n    }\n    this.__eachEvent(events, (event, namespace) => {\n      var _a, _b;\n      if (event.length === 0) {\n        throw error('Need event name');\n      }\n      if (store.indexOf(event, namespace, callback) === false) {\n        const block = {\n          event,\n          originalCallback: callback,\n          syntheticCallback\n        };\n        store.set(event, namespace, block, options === null || options === void 0 ? void 0 : options.top);\n        if (isDOMElement(subject)) {\n          const eOpts = PASSIVE_EVENTS.has(event) ? {\n            passive: true,\n            capture: (_a = options === null || options === void 0 ? void 0 : options.capture) !== null && _a !== void 0 ? _a : false\n          } : (_b = options === null || options === void 0 ? void 0 : options.capture) !== null && _b !== void 0 ? _b : false;\n          syntheticCallback.options = eOpts;\n          subject.addEventListener(event, syntheticCallback, eOpts);\n          this.__memoryDOMSubjectToHandler(subject, syntheticCallback);\n        }\n      }\n    });\n    return this;\n  }\n  __memoryDOMSubjectToHandler(subject, syntheticCallback) {\n    const callbackStore = this.__domEventsMap.get(subject) || new Set();\n    callbackStore.add(syntheticCallback);\n    this.__domEventsMap.set(subject, callbackStore);\n  }\n  __unmemoryDOMSubjectToHandler(subject, syntheticCallback) {\n    const m = this.__domEventsMap;\n    const callbackStore = m.get(subject) || new Set();\n    callbackStore.delete(syntheticCallback);\n    if (callbackStore.size) {\n      m.set(subject, callbackStore);\n    } else {\n      m.delete(subject);\n    }\n  }\n  one(eventsOrSubjects, callbackOrEvents, optionsOrCallback, opts) {\n    let subjects;\n    let events;\n    let callback;\n    let options;\n    if (isString(eventsOrSubjects) || isStringArray(eventsOrSubjects)) {\n      subjects = this;\n      events = eventsOrSubjects;\n      callback = callbackOrEvents;\n      options = optionsOrCallback;\n    } else {\n      subjects = eventsOrSubjects;\n      events = callbackOrEvents;\n      callback = optionsOrCallback;\n      options = opts;\n    }\n    const newCallback = (...args) => {\n      this.off(subjects, events, newCallback);\n      return callback(...args);\n    };\n    this.on(subjects, events, newCallback, options);\n    return this;\n  }\n  off(eventsOrSubjects, callbackOrEvents, handler) {\n    let subjects;\n    let events;\n    let callback;\n    if (isString(eventsOrSubjects) || isStringArray(eventsOrSubjects)) {\n      subjects = this;\n      events = eventsOrSubjects;\n      callback = callbackOrEvents;\n    } else {\n      subjects = eventsOrSubjects;\n      events = callbackOrEvents;\n      callback = handler;\n    }\n    if (isArray(subjects)) {\n      subjects.forEach(subj => {\n        this.off(subj, events, callback);\n      });\n      return this;\n    }\n    const subject = subjects;\n    const store = this.__getStore(subject);\n    if (!(isString(events) || isStringArray(events)) || events.length === 0) {\n      store.namespaces().forEach(namespace => {\n        this.off(subject, '.' + namespace);\n      });\n      this.__removeStoreFromSubject(subject);\n      return this;\n    }\n    const removeEventListener = block => {\n        var _a;\n        if (isDOMElement(subject)) {\n          subject.removeEventListener(block.event, block.syntheticCallback, (_a = block.syntheticCallback.options) !== null && _a !== void 0 ? _a : false);\n          this.__unmemoryDOMSubjectToHandler(subject, block.syntheticCallback);\n        }\n      },\n      removeCallbackFromNameSpace = (event, namespace) => {\n        if (event === '') {\n          store.events(namespace).forEach(eventName => {\n            if (eventName !== '') {\n              removeCallbackFromNameSpace(eventName, namespace);\n            }\n          });\n          return;\n        }\n        const blocks = store.get(event, namespace);\n        if (!blocks || !blocks.length) {\n          return;\n        }\n        if (!isFunction(callback)) {\n          blocks.forEach(removeEventListener);\n          blocks.length = 0;\n          store.clearEvents(namespace, event);\n        } else {\n          const index = store.indexOf(event, namespace, callback);\n          if (index !== false) {\n            removeEventListener(blocks[index]);\n            blocks.splice(index, 1);\n            if (!blocks.length) {\n              store.clearEvents(namespace, event);\n            }\n          }\n        }\n      };\n    this.__eachEvent(events, (event, namespace) => {\n      if (namespace === defaultNameSpace) {\n        store.namespaces().forEach(namespace => {\n          removeCallbackFromNameSpace(event, namespace);\n        });\n      } else {\n        removeCallbackFromNameSpace(event, namespace);\n      }\n    });\n    if (store.isEmpty()) {\n      this.__removeStoreFromSubject(subject);\n    }\n    return this;\n  }\n  stopPropagation(subjectOrEvents, eventsList) {\n    const subject = isString(subjectOrEvents) ? this : subjectOrEvents;\n    const events = isString(subjectOrEvents) ? subjectOrEvents : eventsList;\n    if (typeof events !== 'string') {\n      throw error('Need event names');\n    }\n    const store = this.__getStore(subject);\n    this.__eachEvent(events, (event, namespace) => {\n      const blocks = store.get(event, namespace);\n      if (blocks) {\n        this.__stopped.push(blocks);\n      }\n      if (namespace === defaultNameSpace) {\n        store.namespaces(true).forEach(ns => this.stopPropagation(subject, event + '.' + ns));\n      }\n    });\n  }\n  __removeStop(currentBlocks) {\n    if (currentBlocks) {\n      const index = this.__stopped.indexOf(currentBlocks);\n      index !== -1 && this.__stopped.splice(0, index + 1);\n    }\n  }\n  __isStopped(currentBlocks) {\n    return currentBlocks !== undefined && this.__stopped.indexOf(currentBlocks) !== -1;\n  }\n  fire(subjectOrEvents, eventsList, ...args) {\n    let result, result_value;\n    const subject = isString(subjectOrEvents) ? this : subjectOrEvents;\n    const events = isString(subjectOrEvents) ? subjectOrEvents : eventsList;\n    const argumentsList = isString(subjectOrEvents) ? [eventsList, ...args] : args;\n    if (!isDOMElement(subject) && !isString(events)) {\n      throw error('Need events names');\n    }\n    const store = this.__getStore(subject);\n    if (!isString(events) && isDOMElement(subject)) {\n      this.__triggerNativeEvent(subject, eventsList);\n    } else {\n      this.__eachEvent(events, (event, namespace) => {\n        if (isDOMElement(subject)) {\n          this.__triggerNativeEvent(subject, event);\n        } else {\n          const blocks = store.get(event, namespace);\n          if (blocks) {\n            try {\n              [...blocks].every(block => {\n                if (this.__isStopped(blocks)) {\n                  return false;\n                }\n                this.currents.push(event);\n                result_value = block.syntheticCallback.call(subject, event, ...argumentsList);\n                this.currents.pop();\n                if (result_value !== undefined) {\n                  result = result_value;\n                }\n                return true;\n              });\n            } finally {\n              this.__removeStop(blocks);\n            }\n          }\n          if (namespace === defaultNameSpace && !isDOMElement(subject)) {\n            store.namespaces().filter(ns => ns !== namespace).forEach(ns => {\n              const result_second = this.fire.apply(this, [subject, event + '.' + ns, ...argumentsList]);\n              if (result_second !== undefined) {\n                result = result_second;\n              }\n            });\n          }\n        }\n      });\n    }\n    return result;\n  }\n  constructor(doc) {\n    this.__domEventsMap = new Map();\n    this.__mutedEvents = new Set();\n    this.__key = '__JoditEventEmitterNamespaces';\n    this.__doc = globalDocument;\n    this.__prepareEvent = e => {\n      if (e.cancelBubble) {\n        return;\n      }\n      // for Shadow Dom\n      if (e.composed && isFunction(e.composedPath) && e.composedPath()[0]) {\n        Object.defineProperty(e, 'target', {\n          value: e.composedPath()[0],\n          configurable: true,\n          enumerable: true\n        });\n      }\n      if (e.type.match(/^touch/) && e.changedTouches && e.changedTouches.length) {\n        ['clientX', 'clientY', 'pageX', 'pageY'].forEach(key => {\n          Object.defineProperty(e, key, {\n            value: e.changedTouches[0][key],\n            configurable: true,\n            enumerable: true\n          });\n        });\n      }\n      if (!e.originalEvent) {\n        e.originalEvent = e;\n      }\n      if (e.type === 'paste' && e.clipboardData === undefined && this.__doc.defaultView.clipboardData) {\n        Object.defineProperty(e, 'clipboardData', {\n          get: () => {\n            return this.__doc.defaultView.clipboardData;\n          },\n          configurable: true,\n          enumerable: true\n        });\n      }\n    };\n    this.currents = [];\n    this.__stopped = [];\n    this.__isDestructed = false;\n    if (doc) {\n      this.__doc = doc;\n    }\n    this.__key += new Date().getTime();\n  }\n  destruct() {\n    if (this.__isDestructed) {\n      return;\n    }\n    this.__isDestructed = true;\n    this.__domEventsMap.forEach((set, elm) => {\n      this.off(elm);\n    });\n    this.__domEventsMap.clear();\n    this.__mutedEvents.clear();\n    this.currents.length = 0;\n    this.__stopped.length = 0;\n    this.off(this);\n    this.__getStore(this).clear();\n    this.__removeStoreFromSubject(this);\n  }\n}\nfunction isDOMElement(subject) {\n  return isFunction(subject.addEventListener);\n}","map":{"version":3,"names":["globalDocument","PASSIVE_EVENTS","splitArray","isArray","isFunction","isString","isStringArray","error","defaultNameSpace","EventHandlersStore","EventEmitter","mute","event","__mutedEvents","add","isMuted","has","unmute","delete","__eachEvent","events","callback","eventParts","map","e","trim","forEach","eventNameSpace","eventAndNameSpace","split","namespace","call","__getStore","subject","__key","undefined","store","Object","defineProperty","enumerable","configurable","writable","value","__removeStoreFromSubject","__triggerNativeEvent","element","evt","__doc","createEvent","initEvent","type","bubbles","cancelable","property","dispatchEvent","current","currents","length","on","eventsOrSubjects","callbackOrEvents","optionsOrCallback","opts","subjects","options","subj","self","syntheticCallback","args","isDOMElement","__prepareEvent","preventDefault","stopImmediatePropagation","_a","_b","indexOf","block","originalCallback","set","top","eOpts","passive","capture","addEventListener","__memoryDOMSubjectToHandler","callbackStore","__domEventsMap","get","Set","__unmemoryDOMSubjectToHandler","m","size","one","newCallback","off","handler","namespaces","removeEventListener","removeCallbackFromNameSpace","eventName","blocks","clearEvents","index","splice","isEmpty","stopPropagation","subjectOrEvents","eventsList","__stopped","push","ns","__removeStop","currentBlocks","__isStopped","fire","result","result_value","argumentsList","every","pop","filter","result_second","apply","constructor","doc","Map","cancelBubble","composed","composedPath","match","changedTouches","key","originalEvent","clipboardData","defaultView","__isDestructed","Date","getTime","destruct","elm","clear"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/event-emitter/event-emitter.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { globalDocument, PASSIVE_EVENTS } from \"../constants.js\";\nimport { splitArray } from \"../helpers/array/split-array.js\";\nimport { isArray } from \"../helpers/checker/is-array.js\";\nimport { isFunction } from \"../helpers/checker/is-function.js\";\nimport { isString, isStringArray } from \"../helpers/checker/is-string.js\";\nimport { error } from \"../helpers/utils/error/index.js\";\nimport { defaultNameSpace, EventHandlersStore } from \"./store.js\";\n/**\n * The module editor's event manager\n */\nexport class EventEmitter {\n    mute(event) {\n        this.__mutedEvents.add(event !== null && event !== void 0 ? event : '*');\n        return this;\n    }\n    isMuted(event) {\n        if (event && this.__mutedEvents.has(event)) {\n            return true;\n        }\n        return this.__mutedEvents.has('*');\n    }\n    unmute(event) {\n        this.__mutedEvents.delete(event !== null && event !== void 0 ? event : '*');\n        return this;\n    }\n    __eachEvent(events, callback) {\n        const eventParts = splitArray(events).map(e => e.trim());\n        eventParts.forEach(eventNameSpace => {\n            const eventAndNameSpace = eventNameSpace.split('.');\n            const namespace = eventAndNameSpace[1] || defaultNameSpace;\n            callback.call(this, eventAndNameSpace[0], namespace);\n        });\n    }\n    __getStore(subject) {\n        if (!subject) {\n            throw error('Need subject');\n        }\n        if (subject[this.__key] === undefined) {\n            const store = new EventHandlersStore();\n            Object.defineProperty(subject, this.__key, {\n                enumerable: false,\n                configurable: true,\n                writable: true,\n                value: store\n            });\n        }\n        return subject[this.__key];\n    }\n    __removeStoreFromSubject(subject) {\n        if (subject[this.__key] !== undefined) {\n            Object.defineProperty(subject, this.__key, {\n                enumerable: false,\n                configurable: true,\n                writable: true,\n                value: undefined\n            });\n        }\n    }\n    __triggerNativeEvent(element, event) {\n        const evt = this.__doc.createEvent('HTMLEvents');\n        if (isString(event)) {\n            evt.initEvent(event, true, true);\n        }\n        else {\n            evt.initEvent(event.type, event.bubbles, event.cancelable);\n            [\n                'screenX',\n                'screenY',\n                'clientX',\n                'clientY',\n                'target',\n                'srcElement',\n                'currentTarget',\n                'timeStamp',\n                'which',\n                'keyCode'\n            ].forEach(property => {\n                Object.defineProperty(evt, property, {\n                    value: event[property],\n                    enumerable: true\n                });\n            });\n            Object.defineProperty(evt, 'originalEvent', {\n                value: event,\n                enumerable: true\n            });\n        }\n        element.dispatchEvent(evt);\n    }\n    /**\n     * Get current event name\n     *\n     * @example\n     * ```javascript\n     * parent.e.on('openDialog closeDialog', function () {\n     *     if (parent.e.current === 'closeDialog') {\n     *         alert('Dialog was closed');\n     *     } else {\n     *         alert('Dialog was opened');\n     *     }\n     * });\n     * ```\n     */\n    get current() {\n        return this.currents[this.currents.length - 1];\n    }\n    on(eventsOrSubjects, callbackOrEvents, optionsOrCallback, opts) {\n        let subjects;\n        let events;\n        let callback;\n        let options;\n        if (isString(eventsOrSubjects) || isStringArray(eventsOrSubjects)) {\n            subjects = this;\n            events = eventsOrSubjects;\n            callback = callbackOrEvents;\n            options = optionsOrCallback;\n        }\n        else {\n            subjects = eventsOrSubjects;\n            events = callbackOrEvents;\n            callback = optionsOrCallback;\n            options = opts;\n        }\n        if (!(isString(events) || isStringArray(events)) ||\n            events.length === 0) {\n            throw error('Need events names');\n        }\n        if (!isFunction(callback)) {\n            throw error('Need event handler');\n        }\n        if (isArray(subjects)) {\n            subjects.forEach(subj => {\n                this.on(subj, events, callback, options);\n            });\n            return this;\n        }\n        const subject = subjects;\n        const store = this.__getStore(subject);\n        const self = this;\n        let syntheticCallback = function (event, ...args) {\n            if (self.isMuted(event)) {\n                return;\n            }\n            return callback && callback.call(this, ...args);\n        };\n        if (isDOMElement(subject)) {\n            syntheticCallback = function (event) {\n                if (self.isMuted(event.type)) {\n                    return;\n                }\n                self.__prepareEvent(event);\n                if (callback && callback.call(this, event) === false) {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    return false;\n                }\n                return;\n            };\n        }\n        this.__eachEvent(events, (event, namespace) => {\n            var _a, _b;\n            if (event.length === 0) {\n                throw error('Need event name');\n            }\n            if (store.indexOf(event, namespace, callback) === false) {\n                const block = {\n                    event,\n                    originalCallback: callback,\n                    syntheticCallback\n                };\n                store.set(event, namespace, block, options === null || options === void 0 ? void 0 : options.top);\n                if (isDOMElement(subject)) {\n                    const eOpts = PASSIVE_EVENTS.has(event)\n                        ? {\n                            passive: true,\n                            capture: (_a = options === null || options === void 0 ? void 0 : options.capture) !== null && _a !== void 0 ? _a : false\n                        }\n                        : ((_b = options === null || options === void 0 ? void 0 : options.capture) !== null && _b !== void 0 ? _b : false);\n                    syntheticCallback.options = eOpts;\n                    subject.addEventListener(event, syntheticCallback, eOpts);\n                    this.__memoryDOMSubjectToHandler(subject, syntheticCallback);\n                }\n            }\n        });\n        return this;\n    }\n    __memoryDOMSubjectToHandler(subject, syntheticCallback) {\n        const callbackStore = this.__domEventsMap.get(subject) || new Set();\n        callbackStore.add(syntheticCallback);\n        this.__domEventsMap.set(subject, callbackStore);\n    }\n    __unmemoryDOMSubjectToHandler(subject, syntheticCallback) {\n        const m = this.__domEventsMap;\n        const callbackStore = m.get(subject) || new Set();\n        callbackStore.delete(syntheticCallback);\n        if (callbackStore.size) {\n            m.set(subject, callbackStore);\n        }\n        else {\n            m.delete(subject);\n        }\n    }\n    one(eventsOrSubjects, callbackOrEvents, optionsOrCallback, opts) {\n        let subjects;\n        let events;\n        let callback;\n        let options;\n        if (isString(eventsOrSubjects) || isStringArray(eventsOrSubjects)) {\n            subjects = this;\n            events = eventsOrSubjects;\n            callback = callbackOrEvents;\n            options = optionsOrCallback;\n        }\n        else {\n            subjects = eventsOrSubjects;\n            events = callbackOrEvents;\n            callback = optionsOrCallback;\n            options = opts;\n        }\n        const newCallback = (...args) => {\n            this.off(subjects, events, newCallback);\n            return callback(...args);\n        };\n        this.on(subjects, events, newCallback, options);\n        return this;\n    }\n    off(eventsOrSubjects, callbackOrEvents, handler) {\n        let subjects;\n        let events;\n        let callback;\n        if (isString(eventsOrSubjects) || isStringArray(eventsOrSubjects)) {\n            subjects = this;\n            events = eventsOrSubjects;\n            callback = callbackOrEvents;\n        }\n        else {\n            subjects = eventsOrSubjects;\n            events = callbackOrEvents;\n            callback = handler;\n        }\n        if (isArray(subjects)) {\n            subjects.forEach(subj => {\n                this.off(subj, events, callback);\n            });\n            return this;\n        }\n        const subject = subjects;\n        const store = this.__getStore(subject);\n        if (!(isString(events) || isStringArray(events)) ||\n            events.length === 0) {\n            store.namespaces().forEach((namespace) => {\n                this.off(subject, '.' + namespace);\n            });\n            this.__removeStoreFromSubject(subject);\n            return this;\n        }\n        const removeEventListener = (block) => {\n            var _a;\n            if (isDOMElement(subject)) {\n                subject.removeEventListener(block.event, block.syntheticCallback, (_a = block.syntheticCallback.options) !== null && _a !== void 0 ? _a : false);\n                this.__unmemoryDOMSubjectToHandler(subject, block.syntheticCallback);\n            }\n        }, removeCallbackFromNameSpace = (event, namespace) => {\n            if (event === '') {\n                store.events(namespace).forEach((eventName) => {\n                    if (eventName !== '') {\n                        removeCallbackFromNameSpace(eventName, namespace);\n                    }\n                });\n                return;\n            }\n            const blocks = store.get(event, namespace);\n            if (!blocks || !blocks.length) {\n                return;\n            }\n            if (!isFunction(callback)) {\n                blocks.forEach(removeEventListener);\n                blocks.length = 0;\n                store.clearEvents(namespace, event);\n            }\n            else {\n                const index = store.indexOf(event, namespace, callback);\n                if (index !== false) {\n                    removeEventListener(blocks[index]);\n                    blocks.splice(index, 1);\n                    if (!blocks.length) {\n                        store.clearEvents(namespace, event);\n                    }\n                }\n            }\n        };\n        this.__eachEvent(events, (event, namespace) => {\n            if (namespace === defaultNameSpace) {\n                store.namespaces().forEach(namespace => {\n                    removeCallbackFromNameSpace(event, namespace);\n                });\n            }\n            else {\n                removeCallbackFromNameSpace(event, namespace);\n            }\n        });\n        if (store.isEmpty()) {\n            this.__removeStoreFromSubject(subject);\n        }\n        return this;\n    }\n    stopPropagation(subjectOrEvents, eventsList) {\n        const subject = isString(subjectOrEvents)\n            ? this\n            : subjectOrEvents;\n        const events = isString(subjectOrEvents)\n            ? subjectOrEvents\n            : eventsList;\n        if (typeof events !== 'string') {\n            throw error('Need event names');\n        }\n        const store = this.__getStore(subject);\n        this.__eachEvent(events, (event, namespace) => {\n            const blocks = store.get(event, namespace);\n            if (blocks) {\n                this.__stopped.push(blocks);\n            }\n            if (namespace === defaultNameSpace) {\n                store\n                    .namespaces(true)\n                    .forEach(ns => this.stopPropagation(subject, event + '.' + ns));\n            }\n        });\n    }\n    __removeStop(currentBlocks) {\n        if (currentBlocks) {\n            const index = this.__stopped.indexOf(currentBlocks);\n            index !== -1 && this.__stopped.splice(0, index + 1);\n        }\n    }\n    __isStopped(currentBlocks) {\n        return (currentBlocks !== undefined &&\n            this.__stopped.indexOf(currentBlocks) !== -1);\n    }\n    fire(subjectOrEvents, eventsList, ...args) {\n        let result, result_value;\n        const subject = isString(subjectOrEvents)\n            ? this\n            : subjectOrEvents;\n        const events = isString(subjectOrEvents)\n            ? subjectOrEvents\n            : eventsList;\n        const argumentsList = isString(subjectOrEvents)\n            ? [eventsList, ...args]\n            : args;\n        if (!isDOMElement(subject) && !isString(events)) {\n            throw error('Need events names');\n        }\n        const store = this.__getStore(subject);\n        if (!isString(events) && isDOMElement(subject)) {\n            this.__triggerNativeEvent(subject, eventsList);\n        }\n        else {\n            this.__eachEvent(events, (event, namespace) => {\n                if (isDOMElement(subject)) {\n                    this.__triggerNativeEvent(subject, event);\n                }\n                else {\n                    const blocks = store.get(event, namespace);\n                    if (blocks) {\n                        try {\n                            [...blocks].every((block) => {\n                                if (this.__isStopped(blocks)) {\n                                    return false;\n                                }\n                                this.currents.push(event);\n                                result_value =\n                                    block.syntheticCallback.call(subject, event, ...argumentsList);\n                                this.currents.pop();\n                                if (result_value !== undefined) {\n                                    result = result_value;\n                                }\n                                return true;\n                            });\n                        }\n                        finally {\n                            this.__removeStop(blocks);\n                        }\n                    }\n                    if (namespace === defaultNameSpace &&\n                        !isDOMElement(subject)) {\n                        store\n                            .namespaces()\n                            .filter(ns => ns !== namespace)\n                            .forEach((ns) => {\n                            const result_second = this.fire.apply(this, [\n                                subject,\n                                event + '.' + ns,\n                                ...argumentsList\n                            ]);\n                            if (result_second !== undefined) {\n                                result = result_second;\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        return result;\n    }\n    constructor(doc) {\n        this.__domEventsMap = new Map();\n        this.__mutedEvents = new Set();\n        this.__key = '__JoditEventEmitterNamespaces';\n        this.__doc = globalDocument;\n        this.__prepareEvent = (e) => {\n            if (e.cancelBubble) {\n                return;\n            }\n            // for Shadow Dom\n            if (e.composed && isFunction(e.composedPath) && e.composedPath()[0]) {\n                Object.defineProperty(e, 'target', {\n                    value: e.composedPath()[0],\n                    configurable: true,\n                    enumerable: true\n                });\n            }\n            if (e.type.match(/^touch/) &&\n                e.changedTouches &&\n                e.changedTouches.length) {\n                ['clientX', 'clientY', 'pageX', 'pageY'].forEach((key) => {\n                    Object.defineProperty(e, key, {\n                        value: e.changedTouches[0][key],\n                        configurable: true,\n                        enumerable: true\n                    });\n                });\n            }\n            if (!e.originalEvent) {\n                e.originalEvent = e;\n            }\n            if (e.type === 'paste' &&\n                e.clipboardData === undefined &&\n                this.__doc.defaultView.clipboardData) {\n                Object.defineProperty(e, 'clipboardData', {\n                    get: () => {\n                        return this.__doc.defaultView.clipboardData;\n                    },\n                    configurable: true,\n                    enumerable: true\n                });\n            }\n        };\n        this.currents = [];\n        this.__stopped = [];\n        this.__isDestructed = false;\n        if (doc) {\n            this.__doc = doc;\n        }\n        this.__key += new Date().getTime();\n    }\n    destruct() {\n        if (this.__isDestructed) {\n            return;\n        }\n        this.__isDestructed = true;\n        this.__domEventsMap.forEach((set, elm) => {\n            this.off(elm);\n        });\n        this.__domEventsMap.clear();\n        this.__mutedEvents.clear();\n        this.currents.length = 0;\n        this.__stopped.length = 0;\n        this.off(this);\n        this.__getStore(this).clear();\n        this.__removeStoreFromSubject(this);\n    }\n}\nfunction isDOMElement(subject) {\n    return isFunction(subject.addEventListener);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { KEY_ALIASES } from \"../../constants.js\";\nimport { trim } from \"../string/trim.js\";\n/**\n * Normalize keys to some standard name\n */\nexport function normalizeKeyAliases(keys) {\n  const memory = {};\n  const order = {\n    meta: 1,\n    ctrl: 2,\n    control: 2,\n    alt: 3,\n    shift: 4,\n    space: 5\n  };\n  return keys.replace(/\\+\\+/g, '+add').split(/[\\s]*\\+[\\s]*/).map(key => trim(key.toLowerCase())).map(key => KEY_ALIASES[key] || key).sort((a, b) => {\n    if (order[a] && !order[b]) {\n      return -1;\n    }\n    if (!order[a] && order[b]) {\n      return 1;\n    }\n    if (order[a] && order[b]) {\n      return order[a] - order[b];\n    }\n    return a > b ? 1 : -1;\n  }).filter(key => !memory[key] && key !== '' && (memory[key] = true)).join('+');\n}","map":{"version":3,"names":["KEY_ALIASES","trim","normalizeKeyAliases","keys","memory","order","meta","ctrl","control","alt","shift","space","replace","split","map","key","toLowerCase","sort","a","b","filter","join"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/normalize/normalize-key-aliases.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { KEY_ALIASES } from \"../../constants.js\";\nimport { trim } from \"../string/trim.js\";\n/**\n * Normalize keys to some standard name\n */\nexport function normalizeKeyAliases(keys) {\n    const memory = {};\n    const order = {\n        meta: 1,\n        ctrl: 2,\n        control: 2,\n        alt: 3,\n        shift: 4,\n        space: 5\n    };\n    return keys\n        .replace(/\\+\\+/g, '+add')\n        .split(/[\\s]*\\+[\\s]*/)\n        .map(key => trim(key.toLowerCase()))\n        .map(key => KEY_ALIASES[key] || key)\n        .sort((a, b) => {\n        if (order[a] && !order[b]) {\n            return -1;\n        }\n        if (!order[a] && order[b]) {\n            return 1;\n        }\n        if (order[a] && order[b]) {\n            return order[a] - order[b];\n        }\n        return a > b ? 1 : -1;\n    })\n        .filter(key => !memory[key] && key !== '' && (memory[key] = true))\n        .join('+');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,IAAI,QAAQ,mBAAmB;AACxC;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,IAAI,EAAE;EACtC,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,KAAK,GAAG;IACVC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,CAAC;IACVC,GAAG,EAAE,CAAC;IACNC,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE;EACX,CAAC;EACD,OAAOR,IAAI,CACNS,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CACxBC,KAAK,CAAC,cAAc,CAAC,CACrBC,GAAG,CAACC,GAAG,IAAId,IAAI,CAACc,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CACnCF,GAAG,CAACC,GAAG,IAAIf,WAAW,CAACe,GAAG,CAAC,IAAIA,GAAG,CAAC,CACnCE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAChB,IAAId,KAAK,CAACa,CAAC,CAAC,IAAI,CAACb,KAAK,CAACc,CAAC,CAAC,EAAE;MACvB,OAAO,CAAC,CAAC;IACb;IACA,IAAI,CAACd,KAAK,CAACa,CAAC,CAAC,IAAIb,KAAK,CAACc,CAAC,CAAC,EAAE;MACvB,OAAO,CAAC;IACZ;IACA,IAAId,KAAK,CAACa,CAAC,CAAC,IAAIb,KAAK,CAACc,CAAC,CAAC,EAAE;MACtB,OAAOd,KAAK,CAACa,CAAC,CAAC,GAAGb,KAAK,CAACc,CAAC,CAAC;IAC9B;IACA,OAAOD,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACzB,CAAC,CAAC,CACGC,MAAM,CAACL,GAAG,IAAI,CAACX,MAAM,CAACW,GAAG,CAAC,IAAIA,GAAG,KAAK,EAAE,KAAKX,MAAM,CAACW,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CACjEM,IAAI,CAAC,GAAG,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
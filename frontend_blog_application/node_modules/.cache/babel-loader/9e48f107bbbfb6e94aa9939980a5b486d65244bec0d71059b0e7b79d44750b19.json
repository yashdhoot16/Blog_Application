{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { IS_PROD } from \"../../constants.js\";\nimport { kebabCase } from \"../../helpers/string/kebab-case.js\";\nimport { appendScriptAsync, appendStyleAsync } from \"../../helpers/utils/append-script.js\";\nimport { normalizeName } from \"./utils.js\";\nconst styles = new Set();\n/**\n * @private\n */\nexport async function loadStyle(jodit, pluginName) {\n  const url = getFullUrl(jodit, pluginName, false);\n  if (styles.has(url)) {\n    return;\n  }\n  styles.add(url);\n  return appendStyleAsync(jodit, url);\n}\n/**\n * Call full url to the script or style file\n * @private\n */\nfunction getFullUrl(jodit, name, js) {\n  name = kebabCase(name);\n  return jodit.basePath + 'plugins/' + name + '/' + name + '.' + (js ? 'js' : 'css');\n}\n/**\n * @private\n */\nexport function loadExtras(items, jodit, extraList, callback) {\n  try {\n    const needLoadExtras = extraList.filter(extra => !items.has(normalizeName(extra.name)));\n    if (needLoadExtras.length) {\n      load(jodit, needLoadExtras, callback);\n    }\n  } catch (e) {\n    if (!IS_PROD) {\n      throw e;\n    }\n  }\n}\n/**\n * Download plugins\n * @private\n */\nfunction load(jodit, pluginList, callback) {\n  pluginList.map(extra => {\n    const url = extra.url || getFullUrl(jodit, extra.name, true);\n    return appendScriptAsync(jodit, url).then(callback).catch(() => null);\n  });\n}","map":{"version":3,"names":["IS_PROD","kebabCase","appendScriptAsync","appendStyleAsync","normalizeName","styles","Set","loadStyle","jodit","pluginName","url","getFullUrl","has","add","name","js","basePath","loadExtras","items","extraList","callback","needLoadExtras","filter","extra","length","load","e","pluginList","map","then","catch"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/plugin/helpers/load.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { IS_PROD } from \"../../constants.js\";\nimport { kebabCase } from \"../../helpers/string/kebab-case.js\";\nimport { appendScriptAsync, appendStyleAsync } from \"../../helpers/utils/append-script.js\";\nimport { normalizeName } from \"./utils.js\";\nconst styles = new Set();\n/**\n * @private\n */\nexport async function loadStyle(jodit, pluginName) {\n    const url = getFullUrl(jodit, pluginName, false);\n    if (styles.has(url)) {\n        return;\n    }\n    styles.add(url);\n    return appendStyleAsync(jodit, url);\n}\n/**\n * Call full url to the script or style file\n * @private\n */\nfunction getFullUrl(jodit, name, js) {\n    name = kebabCase(name);\n    return (jodit.basePath +\n        'plugins/' +\n        name +\n        '/' +\n        name +\n        '.' +\n        (js ? 'js' : 'css'));\n}\n/**\n * @private\n */\nexport function loadExtras(items, jodit, extraList, callback) {\n    try {\n        const needLoadExtras = extraList.filter(extra => !items.has(normalizeName(extra.name)));\n        if (needLoadExtras.length) {\n            load(jodit, needLoadExtras, callback);\n        }\n    }\n    catch (e) {\n        if (!IS_PROD) {\n            throw e;\n        }\n    }\n}\n/**\n * Download plugins\n * @private\n */\nfunction load(jodit, pluginList, callback) {\n    pluginList.map(extra => {\n        const url = extra.url || getFullUrl(jodit, extra.name, true);\n        return appendScriptAsync(jodit, url)\n            .then(callback)\n            .catch(() => null);\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,sCAAsC;AAC1F,SAASC,aAAa,QAAQ,YAAY;AAC1C,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;AACxB;AACA;AACA;AACA,OAAO,eAAeC,SAASA,CAACC,KAAK,EAAEC,UAAU,EAAE;EAC/C,MAAMC,GAAG,GAAGC,UAAU,CAACH,KAAK,EAAEC,UAAU,EAAE,KAAK,CAAC;EAChD,IAAIJ,MAAM,CAACO,GAAG,CAACF,GAAG,CAAC,EAAE;IACjB;EACJ;EACAL,MAAM,CAACQ,GAAG,CAACH,GAAG,CAAC;EACf,OAAOP,gBAAgB,CAACK,KAAK,EAAEE,GAAG,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACH,KAAK,EAAEM,IAAI,EAAEC,EAAE,EAAE;EACjCD,IAAI,GAAGb,SAAS,CAACa,IAAI,CAAC;EACtB,OAAQN,KAAK,CAACQ,QAAQ,GAClB,UAAU,GACVF,IAAI,GACJ,GAAG,GACHA,IAAI,GACJ,GAAG,IACFC,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC;AAC3B;AACA;AACA;AACA;AACA,OAAO,SAASE,UAAUA,CAACC,KAAK,EAAEV,KAAK,EAAEW,SAAS,EAAEC,QAAQ,EAAE;EAC1D,IAAI;IACA,MAAMC,cAAc,GAAGF,SAAS,CAACG,MAAM,CAACC,KAAK,IAAI,CAACL,KAAK,CAACN,GAAG,CAACR,aAAa,CAACmB,KAAK,CAACT,IAAI,CAAC,CAAC,CAAC;IACvF,IAAIO,cAAc,CAACG,MAAM,EAAE;MACvBC,IAAI,CAACjB,KAAK,EAAEa,cAAc,EAAED,QAAQ,CAAC;IACzC;EACJ,CAAC,CACD,OAAOM,CAAC,EAAE;IACN,IAAI,CAAC1B,OAAO,EAAE;MACV,MAAM0B,CAAC;IACX;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA,SAASD,IAAIA,CAACjB,KAAK,EAAEmB,UAAU,EAAEP,QAAQ,EAAE;EACvCO,UAAU,CAACC,GAAG,CAACL,KAAK,IAAI;IACpB,MAAMb,GAAG,GAAGa,KAAK,CAACb,GAAG,IAAIC,UAAU,CAACH,KAAK,EAAEe,KAAK,CAACT,IAAI,EAAE,IAAI,CAAC;IAC5D,OAAOZ,iBAAiB,CAACM,KAAK,EAAEE,GAAG,CAAC,CAC/BmB,IAAI,CAACT,QAAQ,CAAC,CACdU,KAAK,CAAC,MAAM,IAAI,CAAC;EAC1B,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { isFunction, isPlainObject, isString } from \"../checker/index.js\";\nimport { CamelCaseToKebabCase } from \"../string/kebab-case.js\";\nimport { css } from \"./css.js\";\n/**\n * Alias for `elm.getAttribute` but if set second argument `-{key}`\n * it will also check `data-{key}` attribute\n * if set `value` it is alias for setAttribute with the same logic\n */\nexport function attr(elm, keyOrAttributes, value) {\n  if (!elm || !isFunction(elm.getAttribute)) {\n    return null;\n  }\n  if (!isString(keyOrAttributes)) {\n    Object.keys(keyOrAttributes).forEach(key => {\n      const value = keyOrAttributes[key];\n      if (isPlainObject(value) && key === 'style') {\n        css(elm, value);\n      } else {\n        if (key === 'className') {\n          key = 'class';\n        }\n        attr(elm, key, value);\n      }\n    });\n    return null;\n  }\n  let key = CamelCaseToKebabCase(keyOrAttributes);\n  if (/^-/.test(key)) {\n    const res = attr(elm, `data${key}`);\n    if (res) {\n      return res;\n    }\n    key = key.substr(1);\n  }\n  if (value !== undefined) {\n    if (value == null) {\n      elm.hasAttribute(key) && elm.removeAttribute(key);\n    } else {\n      let replaceValue = value.toString();\n      if (elm.nodeName === 'IMG' && (key === 'width' || key === 'height')) {\n        replaceValue = replaceValue.replace('px', '');\n      }\n      elm.setAttribute(key, replaceValue);\n      return replaceValue;\n    }\n  }\n  return elm.getAttribute(key);\n}","map":{"version":3,"names":["isFunction","isPlainObject","isString","CamelCaseToKebabCase","css","attr","elm","keyOrAttributes","value","getAttribute","Object","keys","forEach","key","test","res","substr","undefined","hasAttribute","removeAttribute","replaceValue","toString","nodeName","replace","setAttribute"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/utils/attr.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { isFunction, isPlainObject, isString } from \"../checker/index.js\";\nimport { CamelCaseToKebabCase } from \"../string/kebab-case.js\";\nimport { css } from \"./css.js\";\n/**\n * Alias for `elm.getAttribute` but if set second argument `-{key}`\n * it will also check `data-{key}` attribute\n * if set `value` it is alias for setAttribute with the same logic\n */\nexport function attr(elm, keyOrAttributes, value) {\n    if (!elm || !isFunction(elm.getAttribute)) {\n        return null;\n    }\n    if (!isString(keyOrAttributes)) {\n        Object.keys(keyOrAttributes).forEach(key => {\n            const value = keyOrAttributes[key];\n            if (isPlainObject(value) && key === 'style') {\n                css(elm, value);\n            }\n            else {\n                if (key === 'className') {\n                    key = 'class';\n                }\n                attr(elm, key, value);\n            }\n        });\n        return null;\n    }\n    let key = CamelCaseToKebabCase(keyOrAttributes);\n    if (/^-/.test(key)) {\n        const res = attr(elm, `data${key}`);\n        if (res) {\n            return res;\n        }\n        key = key.substr(1);\n    }\n    if (value !== undefined) {\n        if (value == null) {\n            elm.hasAttribute(key) && elm.removeAttribute(key);\n        }\n        else {\n            let replaceValue = value.toString();\n            if (elm.nodeName === 'IMG' &&\n                (key === 'width' || key === 'height')) {\n                replaceValue = replaceValue.replace('px', '');\n            }\n            elm.setAttribute(key, replaceValue);\n            return replaceValue;\n        }\n    }\n    return elm.getAttribute(key);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,qBAAqB;AACzE,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,SAASC,GAAG,QAAQ,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,GAAG,EAAEC,eAAe,EAAEC,KAAK,EAAE;EAC9C,IAAI,CAACF,GAAG,IAAI,CAACN,UAAU,CAACM,GAAG,CAACG,YAAY,CAAC,EAAE;IACvC,OAAO,IAAI;EACf;EACA,IAAI,CAACP,QAAQ,CAACK,eAAe,CAAC,EAAE;IAC5BG,MAAM,CAACC,IAAI,CAACJ,eAAe,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;MACxC,MAAML,KAAK,GAAGD,eAAe,CAACM,GAAG,CAAC;MAClC,IAAIZ,aAAa,CAACO,KAAK,CAAC,IAAIK,GAAG,KAAK,OAAO,EAAE;QACzCT,GAAG,CAACE,GAAG,EAAEE,KAAK,CAAC;MACnB,CAAC,MACI;QACD,IAAIK,GAAG,KAAK,WAAW,EAAE;UACrBA,GAAG,GAAG,OAAO;QACjB;QACAR,IAAI,CAACC,GAAG,EAAEO,GAAG,EAAEL,KAAK,CAAC;MACzB;IACJ,CAAC,CAAC;IACF,OAAO,IAAI;EACf;EACA,IAAIK,GAAG,GAAGV,oBAAoB,CAACI,eAAe,CAAC;EAC/C,IAAI,IAAI,CAACO,IAAI,CAACD,GAAG,CAAC,EAAE;IAChB,MAAME,GAAG,GAAGV,IAAI,CAACC,GAAG,EAAE,OAAOO,GAAG,EAAE,CAAC;IACnC,IAAIE,GAAG,EAAE;MACL,OAAOA,GAAG;IACd;IACAF,GAAG,GAAGA,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;EACvB;EACA,IAAIR,KAAK,KAAKS,SAAS,EAAE;IACrB,IAAIT,KAAK,IAAI,IAAI,EAAE;MACfF,GAAG,CAACY,YAAY,CAACL,GAAG,CAAC,IAAIP,GAAG,CAACa,eAAe,CAACN,GAAG,CAAC;IACrD,CAAC,MACI;MACD,IAAIO,YAAY,GAAGZ,KAAK,CAACa,QAAQ,CAAC,CAAC;MACnC,IAAIf,GAAG,CAACgB,QAAQ,KAAK,KAAK,KACrBT,GAAG,KAAK,OAAO,IAAIA,GAAG,KAAK,QAAQ,CAAC,EAAE;QACvCO,YAAY,GAAGA,YAAY,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MACjD;MACAjB,GAAG,CAACkB,YAAY,CAACX,GAAG,EAAEO,YAAY,CAAC;MACnC,OAAOA,YAAY;IACvB;EACJ;EACA,OAAOd,GAAG,CAACG,YAAY,CAACI,GAAG,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
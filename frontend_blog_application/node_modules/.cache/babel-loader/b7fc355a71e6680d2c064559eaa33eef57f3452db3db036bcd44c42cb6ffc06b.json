{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNextKeyDef = getNextKeyDef;\n\n/**\n * Get the next key from keyMap\n *\n * Keys can be referenced by `{key}` or `{special}` as well as physical locations per `[code]`.\n * Everything else will be interpreted as a typed character - e.g. `a`.\n * Brackets `{` and `[` can be escaped by doubling - e.g. `foo[[bar` translates to `foo[bar`.\n * Keeping the key pressed can be written as `{key>}`.\n * Modifiers like `{shift}` imply being kept pressed. This can be turned of per `{shift/}`.\n */\nfunction getNextKeyDef(text, options) {\n  var _text$slice$match;\n  const startBracket = ['{', '['].includes(text[0]) ? text[0] : '';\n  const startModifier = startBracket && text[1] === '/' ? '/' : '';\n  const descriptorStart = startBracket.length + startModifier.length;\n  const descriptor = startBracket ? text[descriptorStart] === startBracket ? startBracket : (_text$slice$match = text.slice(descriptorStart).match(/^\\w+/)) == null ? void 0 : _text$slice$match[0] : text[descriptorStart];\n  if (!descriptor) {\n    throw new Error(getErrorMessage('key descriptor', text[descriptorStart], text));\n  }\n  const descriptorEnd = descriptorStart + descriptor.length;\n  const endModifier = startBracket && descriptor !== startBracket && ['/', '>'].includes(text[descriptorEnd]) ? text[descriptorEnd] : '';\n  const endBracket = !startBracket || descriptor === startBracket ? '' : startBracket === '{' ? '}' : ']';\n  if (endBracket && text[descriptorEnd + endModifier.length] !== endBracket) {\n    throw new Error(getErrorMessage('closing bracket', text[descriptorEnd + endModifier.length], text));\n  }\n  const modifiers = {\n    consumedLength: [startBracket, startModifier, descriptor, endModifier, endBracket].map(c => c.length).reduce((a, b) => a + b),\n    releasePrevious: startModifier === '/',\n    releaseSelf: hasReleaseSelf(startBracket, descriptor, endModifier)\n  };\n  if (isPrintableCharacter(startBracket, descriptor)) {\n    var _options$keyboardMap$;\n    return {\n      ...modifiers,\n      keyDef: (_options$keyboardMap$ = options.keyboardMap.find(k => k.key === descriptor)) != null ? _options$keyboardMap$ : {\n        key: descriptor,\n        code: 'Unknown'\n      }\n    };\n  } else if (startBracket === '{') {\n    var _options$keyboardMap$2;\n    const key = mapLegacyKey(descriptor);\n    return {\n      ...modifiers,\n      keyDef: (_options$keyboardMap$2 = options.keyboardMap.find(k => {\n        var _k$key;\n        return ((_k$key = k.key) == null ? void 0 : _k$key.toLowerCase()) === key.toLowerCase();\n      })) != null ? _options$keyboardMap$2 : {\n        key: descriptor,\n        code: 'Unknown'\n      }\n    };\n  } else {\n    var _options$keyboardMap$3;\n    return {\n      ...modifiers,\n      keyDef: (_options$keyboardMap$3 = options.keyboardMap.find(k => {\n        var _k$code;\n        return ((_k$code = k.code) == null ? void 0 : _k$code.toLowerCase()) === descriptor.toLowerCase();\n      })) != null ? _options$keyboardMap$3 : {\n        key: 'Unknown',\n        code: descriptor\n      }\n    };\n  }\n}\nfunction hasReleaseSelf(startBracket, descriptor, endModifier) {\n  if (endModifier === '/' || !startBracket) {\n    return true;\n  }\n  if (startBracket === '{' && ['alt', 'ctrl', 'meta', 'shift'].includes(descriptor.toLowerCase())) {\n    return false;\n  }\n  return endModifier !== '>';\n}\nfunction mapLegacyKey(descriptor) {\n  var _ctrl$del$esc$space$d;\n  return (_ctrl$del$esc$space$d = {\n    ctrl: 'Control',\n    del: 'Delete',\n    esc: 'Escape',\n    space: ' '\n  }[descriptor]) != null ? _ctrl$del$esc$space$d : descriptor;\n}\nfunction isPrintableCharacter(startBracket, descriptor) {\n  return !startBracket || startBracket === descriptor || startBracket === '{' && descriptor.length === 1;\n}\nfunction getErrorMessage(expected, found, text) {\n  return `Expected ${expected} but found \"${found != null ? found : ''}\" in \"${text}\"\n    See https://github.com/testing-library/user-event/blob/main/README.md#keyboardtext-options\n    for more information about how userEvent parses your input.`;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getNextKeyDef","text","options","_text$slice$match","startBracket","includes","startModifier","descriptorStart","length","descriptor","slice","match","Error","getErrorMessage","descriptorEnd","endModifier","endBracket","modifiers","consumedLength","map","c","reduce","a","b","releasePrevious","releaseSelf","hasReleaseSelf","isPrintableCharacter","_options$keyboardMap$","keyDef","keyboardMap","find","k","key","code","_options$keyboardMap$2","mapLegacyKey","_k$key","toLowerCase","_options$keyboardMap$3","_k$code","_ctrl$del$esc$space$d","ctrl","del","esc","space","expected","found"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/@testing-library/user-event/dist/keyboard/getNextKeyDef.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNextKeyDef = getNextKeyDef;\n\n/**\n * Get the next key from keyMap\n *\n * Keys can be referenced by `{key}` or `{special}` as well as physical locations per `[code]`.\n * Everything else will be interpreted as a typed character - e.g. `a`.\n * Brackets `{` and `[` can be escaped by doubling - e.g. `foo[[bar` translates to `foo[bar`.\n * Keeping the key pressed can be written as `{key>}`.\n * Modifiers like `{shift}` imply being kept pressed. This can be turned of per `{shift/}`.\n */\nfunction getNextKeyDef(text, options) {\n  var _text$slice$match;\n\n  const startBracket = ['{', '['].includes(text[0]) ? text[0] : '';\n  const startModifier = startBracket && text[1] === '/' ? '/' : '';\n  const descriptorStart = startBracket.length + startModifier.length;\n  const descriptor = startBracket ? text[descriptorStart] === startBracket ? startBracket : (_text$slice$match = text.slice(descriptorStart).match(/^\\w+/)) == null ? void 0 : _text$slice$match[0] : text[descriptorStart];\n\n  if (!descriptor) {\n    throw new Error(getErrorMessage('key descriptor', text[descriptorStart], text));\n  }\n\n  const descriptorEnd = descriptorStart + descriptor.length;\n  const endModifier = startBracket && descriptor !== startBracket && ['/', '>'].includes(text[descriptorEnd]) ? text[descriptorEnd] : '';\n  const endBracket = !startBracket || descriptor === startBracket ? '' : startBracket === '{' ? '}' : ']';\n\n  if (endBracket && text[descriptorEnd + endModifier.length] !== endBracket) {\n    throw new Error(getErrorMessage('closing bracket', text[descriptorEnd + endModifier.length], text));\n  }\n\n  const modifiers = {\n    consumedLength: [startBracket, startModifier, descriptor, endModifier, endBracket].map(c => c.length).reduce((a, b) => a + b),\n    releasePrevious: startModifier === '/',\n    releaseSelf: hasReleaseSelf(startBracket, descriptor, endModifier)\n  };\n\n  if (isPrintableCharacter(startBracket, descriptor)) {\n    var _options$keyboardMap$;\n\n    return { ...modifiers,\n      keyDef: (_options$keyboardMap$ = options.keyboardMap.find(k => k.key === descriptor)) != null ? _options$keyboardMap$ : {\n        key: descriptor,\n        code: 'Unknown'\n      }\n    };\n  } else if (startBracket === '{') {\n    var _options$keyboardMap$2;\n\n    const key = mapLegacyKey(descriptor);\n    return { ...modifiers,\n      keyDef: (_options$keyboardMap$2 = options.keyboardMap.find(k => {\n        var _k$key;\n\n        return ((_k$key = k.key) == null ? void 0 : _k$key.toLowerCase()) === key.toLowerCase();\n      })) != null ? _options$keyboardMap$2 : {\n        key: descriptor,\n        code: 'Unknown'\n      }\n    };\n  } else {\n    var _options$keyboardMap$3;\n\n    return { ...modifiers,\n      keyDef: (_options$keyboardMap$3 = options.keyboardMap.find(k => {\n        var _k$code;\n\n        return ((_k$code = k.code) == null ? void 0 : _k$code.toLowerCase()) === descriptor.toLowerCase();\n      })) != null ? _options$keyboardMap$3 : {\n        key: 'Unknown',\n        code: descriptor\n      }\n    };\n  }\n}\n\nfunction hasReleaseSelf(startBracket, descriptor, endModifier) {\n  if (endModifier === '/' || !startBracket) {\n    return true;\n  }\n\n  if (startBracket === '{' && ['alt', 'ctrl', 'meta', 'shift'].includes(descriptor.toLowerCase())) {\n    return false;\n  }\n\n  return endModifier !== '>';\n}\n\nfunction mapLegacyKey(descriptor) {\n  var _ctrl$del$esc$space$d;\n\n  return (_ctrl$del$esc$space$d = {\n    ctrl: 'Control',\n    del: 'Delete',\n    esc: 'Escape',\n    space: ' '\n  }[descriptor]) != null ? _ctrl$del$esc$space$d : descriptor;\n}\n\nfunction isPrintableCharacter(startBracket, descriptor) {\n  return !startBracket || startBracket === descriptor || startBracket === '{' && descriptor.length === 1;\n}\n\nfunction getErrorMessage(expected, found, text) {\n  return `Expected ${expected} but found \"${found != null ? found : ''}\" in \"${text}\"\n    See https://github.com/testing-library/user-event/blob/main/README.md#keyboardtext-options\n    for more information about how userEvent parses your input.`;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAGA,aAAa;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAaA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACpC,IAAIC,iBAAiB;EAErB,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;EAChE,MAAMK,aAAa,GAAGF,YAAY,IAAIH,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,EAAE;EAChE,MAAMM,eAAe,GAAGH,YAAY,CAACI,MAAM,GAAGF,aAAa,CAACE,MAAM;EAClE,MAAMC,UAAU,GAAGL,YAAY,GAAGH,IAAI,CAACM,eAAe,CAAC,KAAKH,YAAY,GAAGA,YAAY,GAAG,CAACD,iBAAiB,GAAGF,IAAI,CAACS,KAAK,CAACH,eAAe,CAAC,CAACI,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGR,iBAAiB,CAAC,CAAC,CAAC,GAAGF,IAAI,CAACM,eAAe,CAAC;EAEzN,IAAI,CAACE,UAAU,EAAE;IACf,MAAM,IAAIG,KAAK,CAACC,eAAe,CAAC,gBAAgB,EAAEZ,IAAI,CAACM,eAAe,CAAC,EAAEN,IAAI,CAAC,CAAC;EACjF;EAEA,MAAMa,aAAa,GAAGP,eAAe,GAAGE,UAAU,CAACD,MAAM;EACzD,MAAMO,WAAW,GAAGX,YAAY,IAAIK,UAAU,KAAKL,YAAY,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACJ,IAAI,CAACa,aAAa,CAAC,CAAC,GAAGb,IAAI,CAACa,aAAa,CAAC,GAAG,EAAE;EACtI,MAAME,UAAU,GAAG,CAACZ,YAAY,IAAIK,UAAU,KAAKL,YAAY,GAAG,EAAE,GAAGA,YAAY,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;EAEvG,IAAIY,UAAU,IAAIf,IAAI,CAACa,aAAa,GAAGC,WAAW,CAACP,MAAM,CAAC,KAAKQ,UAAU,EAAE;IACzE,MAAM,IAAIJ,KAAK,CAACC,eAAe,CAAC,iBAAiB,EAAEZ,IAAI,CAACa,aAAa,GAAGC,WAAW,CAACP,MAAM,CAAC,EAAEP,IAAI,CAAC,CAAC;EACrG;EAEA,MAAMgB,SAAS,GAAG;IAChBC,cAAc,EAAE,CAACd,YAAY,EAAEE,aAAa,EAAEG,UAAU,EAAEM,WAAW,EAAEC,UAAU,CAAC,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACZ,MAAM,CAAC,CAACa,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IAC7HC,eAAe,EAAElB,aAAa,KAAK,GAAG;IACtCmB,WAAW,EAAEC,cAAc,CAACtB,YAAY,EAAEK,UAAU,EAAEM,WAAW;EACnE,CAAC;EAED,IAAIY,oBAAoB,CAACvB,YAAY,EAAEK,UAAU,CAAC,EAAE;IAClD,IAAImB,qBAAqB;IAEzB,OAAO;MAAE,GAAGX,SAAS;MACnBY,MAAM,EAAE,CAACD,qBAAqB,GAAG1B,OAAO,CAAC4B,WAAW,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKxB,UAAU,CAAC,KAAK,IAAI,GAAGmB,qBAAqB,GAAG;QACtHK,GAAG,EAAExB,UAAU;QACfyB,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC,MAAM,IAAI9B,YAAY,KAAK,GAAG,EAAE;IAC/B,IAAI+B,sBAAsB;IAE1B,MAAMF,GAAG,GAAGG,YAAY,CAAC3B,UAAU,CAAC;IACpC,OAAO;MAAE,GAAGQ,SAAS;MACnBY,MAAM,EAAE,CAACM,sBAAsB,GAAGjC,OAAO,CAAC4B,WAAW,CAACC,IAAI,CAACC,CAAC,IAAI;QAC9D,IAAIK,MAAM;QAEV,OAAO,CAAC,CAACA,MAAM,GAAGL,CAAC,CAACC,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGI,MAAM,CAACC,WAAW,CAAC,CAAC,MAAML,GAAG,CAACK,WAAW,CAAC,CAAC;MACzF,CAAC,CAAC,KAAK,IAAI,GAAGH,sBAAsB,GAAG;QACrCF,GAAG,EAAExB,UAAU;QACfyB,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC,MAAM;IACL,IAAIK,sBAAsB;IAE1B,OAAO;MAAE,GAAGtB,SAAS;MACnBY,MAAM,EAAE,CAACU,sBAAsB,GAAGrC,OAAO,CAAC4B,WAAW,CAACC,IAAI,CAACC,CAAC,IAAI;QAC9D,IAAIQ,OAAO;QAEX,OAAO,CAAC,CAACA,OAAO,GAAGR,CAAC,CAACE,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGM,OAAO,CAACF,WAAW,CAAC,CAAC,MAAM7B,UAAU,CAAC6B,WAAW,CAAC,CAAC;MACnG,CAAC,CAAC,KAAK,IAAI,GAAGC,sBAAsB,GAAG;QACrCN,GAAG,EAAE,SAAS;QACdC,IAAI,EAAEzB;MACR;IACF,CAAC;EACH;AACF;AAEA,SAASiB,cAAcA,CAACtB,YAAY,EAAEK,UAAU,EAAEM,WAAW,EAAE;EAC7D,IAAIA,WAAW,KAAK,GAAG,IAAI,CAACX,YAAY,EAAE;IACxC,OAAO,IAAI;EACb;EAEA,IAAIA,YAAY,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAACC,QAAQ,CAACI,UAAU,CAAC6B,WAAW,CAAC,CAAC,CAAC,EAAE;IAC/F,OAAO,KAAK;EACd;EAEA,OAAOvB,WAAW,KAAK,GAAG;AAC5B;AAEA,SAASqB,YAAYA,CAAC3B,UAAU,EAAE;EAChC,IAAIgC,qBAAqB;EAEzB,OAAO,CAACA,qBAAqB,GAAG;IAC9BC,IAAI,EAAE,SAAS;IACfC,GAAG,EAAE,QAAQ;IACbC,GAAG,EAAE,QAAQ;IACbC,KAAK,EAAE;EACT,CAAC,CAACpC,UAAU,CAAC,KAAK,IAAI,GAAGgC,qBAAqB,GAAGhC,UAAU;AAC7D;AAEA,SAASkB,oBAAoBA,CAACvB,YAAY,EAAEK,UAAU,EAAE;EACtD,OAAO,CAACL,YAAY,IAAIA,YAAY,KAAKK,UAAU,IAAIL,YAAY,KAAK,GAAG,IAAIK,UAAU,CAACD,MAAM,KAAK,CAAC;AACxG;AAEA,SAASK,eAAeA,CAACiC,QAAQ,EAAEC,KAAK,EAAE9C,IAAI,EAAE;EAC9C,OAAO,YAAY6C,QAAQ,eAAeC,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,EAAE,SAAS9C,IAAI;AACnF;AACA,gEAAgE;AAChE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
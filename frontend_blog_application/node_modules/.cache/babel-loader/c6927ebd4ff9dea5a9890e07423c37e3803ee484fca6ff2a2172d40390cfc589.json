{"ast":null,"code":"// isLoggedIn => Check whether user is logged in or not..\nexport const isLoggedIn = () => {\n  let data = localStorage.getItem(\"data\");\n  if (data != null) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// doLogin=>  data=>  set to localstorage..\nexport const doLogin = (data, next) => {\n  console.log(\"Before storing:\", data); // Check the format before saving\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  console.log(\"After storing:\", localStorage.getItem(\"data\")); // Verify storage\n  next();\n};\n\n//doLogout => remove from localstorage\nexport const doLogout = next => {\n  localStorage.removeItem(\"data\");\n  next();\n};\n\n// Get currentUser Details.\n// export const getCurrentUserDetail = () => {\n//   if (isLoggedIn()) {\n//     return JSON.parse(localStorage.getItem(\"data\")).user;\n//   }\n//   else{\n//     return undefined;\n//   }\n// };\n\nexport const getCurrentUserDetail = () => {\n  let data = localStorage.getItem(\"data\");\n  console.log(\"Raw LocalStorage Data:\", data); // Check what's stored\n  if (data) {\n    let parsedData = JSON.parse(data);\n    console.log(\"Stored Data:\", parsedData); // Debugging step\n    return parsedData.user || null; // Ensure it does not return undefined\n  }\n  return null;\n};","map":{"version":3,"names":["isLoggedIn","data","localStorage","getItem","doLogin","next","console","log","setItem","JSON","stringify","doLogout","removeItem","getCurrentUserDetail","parsedData","parse","user"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/src/auth/index.js"],"sourcesContent":["// isLoggedIn => Check whether user is logged in or not..\r\nexport const isLoggedIn = () => {\r\n  let data = localStorage.getItem(\"data\");\r\n  if (data != null) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n// doLogin=>  data=>  set to localstorage..\r\nexport const doLogin = (data, next) => {\r\n  console.log(\"Before storing:\", data); // Check the format before saving\r\n  localStorage.setItem(\"data\", JSON.stringify(data));\r\n  console.log(\"After storing:\", localStorage.getItem(\"data\")); // Verify storage\r\n  next();\r\n};\r\n\r\n//doLogout => remove from localstorage\r\nexport const doLogout = (next) => {\r\n  localStorage.removeItem(\"data\");\r\n  next();\r\n};\r\n\r\n// Get currentUser Details.\r\n// export const getCurrentUserDetail = () => {\r\n//   if (isLoggedIn()) {\r\n//     return JSON.parse(localStorage.getItem(\"data\")).user;\r\n//   }\r\n//   else{\r\n//     return undefined;\r\n//   }\r\n// };\r\n\r\nexport const getCurrentUserDetail = () => {\r\n  let data = localStorage.getItem(\"data\");\r\n  console.log(\"Raw LocalStorage Data:\", data); // Check what's stored\r\n  if (data) {\r\n    let parsedData = JSON.parse(data);\r\n    console.log(\"Stored Data:\", parsedData); // Debugging step\r\n    return parsedData.user || null; // Ensure it does not return undefined\r\n  }\r\n  return null;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAAA,KAAM;EAC9B,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACvC,IAAIF,IAAI,IAAI,IAAI,EAAE;IAChB,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAGA,CAACH,IAAI,EAAEI,IAAI,KAAK;EACrCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEN,IAAI,CAAC,CAAC,CAAC;EACtCC,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,CAAC;EAClDK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7DE,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AACA,OAAO,MAAMM,QAAQ,GAAIN,IAAI,IAAK;EAChCH,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;EAC/BP,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMQ,oBAAoB,GAAGA,CAAA,KAAM;EACxC,IAAIZ,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACvCG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEN,IAAI,CAAC,CAAC,CAAC;EAC7C,IAAIA,IAAI,EAAE;IACR,IAAIa,UAAU,GAAGL,IAAI,CAACM,KAAK,CAACd,IAAI,CAAC;IACjCK,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEO,UAAU,CAAC,CAAC,CAAC;IACzC,OAAOA,UAAU,CAACE,IAAI,IAAI,IAAI,CAAC,CAAC;EAClC;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
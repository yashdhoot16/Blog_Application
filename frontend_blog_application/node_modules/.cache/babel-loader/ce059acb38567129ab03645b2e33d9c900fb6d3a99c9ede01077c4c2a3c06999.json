{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/normalize\n */\nimport { isNumeric } from \"../checker/is-numeric.js\";\nimport { isVoid } from \"../checker/is-void.js\";\nimport { colorToHex } from \"../color/color-to-hex.js\";\nimport { kebabCase } from \"../string/kebab-case.js\";\nexport const NUMBER_FIELDS_REG = /^(left|top|bottom|right|width|min|max|height|margin|padding|fontsize|font-size)/i;\nexport function normalizeCssNumericValue(key, value) {\n  if (!isVoid(value) && NUMBER_FIELDS_REG.test(key) && isNumeric(value.toString())) {\n    return parseInt(value.toString(), 10) + 'px';\n  }\n  return value;\n}\nexport function normalizeCssValue(key, value) {\n  switch (kebabCase(key)) {\n    case 'font-weight':\n      switch (value.toString().toLowerCase()) {\n        case '700':\n        case 'bold':\n          return 700;\n        case '400':\n        case 'normal':\n          return 400;\n        case '900':\n        case 'heavy':\n          return 900;\n      }\n      return isNumeric(value) ? Number(value) : value;\n  }\n  if (/color/i.test(key) && /^rgb/i.test(value.toString())) {\n    return colorToHex(value.toString()) || value;\n  }\n  return value;\n}","map":{"version":3,"names":["isNumeric","isVoid","colorToHex","kebabCase","NUMBER_FIELDS_REG","normalizeCssNumericValue","key","value","test","toString","parseInt","normalizeCssValue","toLowerCase","Number"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/normalize/normalize-css-value.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/normalize\n */\nimport { isNumeric } from \"../checker/is-numeric.js\";\nimport { isVoid } from \"../checker/is-void.js\";\nimport { colorToHex } from \"../color/color-to-hex.js\";\nimport { kebabCase } from \"../string/kebab-case.js\";\nexport const NUMBER_FIELDS_REG = /^(left|top|bottom|right|width|min|max|height|margin|padding|fontsize|font-size)/i;\nexport function normalizeCssNumericValue(key, value) {\n    if (!isVoid(value) &&\n        NUMBER_FIELDS_REG.test(key) &&\n        isNumeric(value.toString())) {\n        return parseInt(value.toString(), 10) + 'px';\n    }\n    return value;\n}\nexport function normalizeCssValue(key, value) {\n    switch (kebabCase(key)) {\n        case 'font-weight':\n            switch (value.toString().toLowerCase()) {\n                case '700':\n                case 'bold':\n                    return 700;\n                case '400':\n                case 'normal':\n                    return 400;\n                case '900':\n                case 'heavy':\n                    return 900;\n            }\n            return isNumeric(value) ? Number(value) : value;\n    }\n    if (/color/i.test(key) && /^rgb/i.test(value.toString())) {\n        return colorToHex(value.toString()) || value;\n    }\n    return value;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAO,MAAMC,iBAAiB,GAAG,kFAAkF;AACnH,OAAO,SAASC,wBAAwBA,CAACC,GAAG,EAAEC,KAAK,EAAE;EACjD,IAAI,CAACN,MAAM,CAACM,KAAK,CAAC,IACdH,iBAAiB,CAACI,IAAI,CAACF,GAAG,CAAC,IAC3BN,SAAS,CAACO,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE;IAC7B,OAAOC,QAAQ,CAACH,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;EAChD;EACA,OAAOF,KAAK;AAChB;AACA,OAAO,SAASI,iBAAiBA,CAACL,GAAG,EAAEC,KAAK,EAAE;EAC1C,QAAQJ,SAAS,CAACG,GAAG,CAAC;IAClB,KAAK,aAAa;MACd,QAAQC,KAAK,CAACE,QAAQ,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;QAClC,KAAK,KAAK;QACV,KAAK,MAAM;UACP,OAAO,GAAG;QACd,KAAK,KAAK;QACV,KAAK,QAAQ;UACT,OAAO,GAAG;QACd,KAAK,KAAK;QACV,KAAK,OAAO;UACR,OAAO,GAAG;MAClB;MACA,OAAOZ,SAAS,CAACO,KAAK,CAAC,GAAGM,MAAM,CAACN,KAAK,CAAC,GAAGA,KAAK;EACvD;EACA,IAAI,QAAQ,CAACC,IAAI,CAACF,GAAG,CAAC,IAAI,OAAO,CAACE,IAAI,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE;IACtD,OAAOP,UAAU,CAACK,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,IAAIF,KAAK;EAChD;EACA,OAAOA,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
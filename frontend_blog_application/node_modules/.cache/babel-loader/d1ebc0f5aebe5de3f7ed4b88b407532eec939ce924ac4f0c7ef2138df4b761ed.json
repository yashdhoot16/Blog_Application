{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/string\n */\nimport { INVISIBLE_SPACE_REG_EXP_END, INVISIBLE_SPACE_REG_EXP_START, SPACE_REG_EXP_END, SPACE_REG_EXP_START } from \"../../constants.js\";\n/**\n * It clears the line of all auxiliary invisible characters , from the spaces and line breaks , tabs\n * from the beginning and end of the line\n */\nexport function trim(value) {\n  return value.replace(SPACE_REG_EXP_END(), '').replace(SPACE_REG_EXP_START(), '');\n}\nexport function trimChars(value, chars) {\n  return value.replace(RegExp(`[${chars}]+$`), '').replace(RegExp(`^[${chars}]+`), '');\n}\n/**\n * Trim only invisible chars\n */\nexport function trimInv(value) {\n  return value.replace(INVISIBLE_SPACE_REG_EXP_END(), '').replace(INVISIBLE_SPACE_REG_EXP_START(), '');\n}","map":{"version":3,"names":["INVISIBLE_SPACE_REG_EXP_END","INVISIBLE_SPACE_REG_EXP_START","SPACE_REG_EXP_END","SPACE_REG_EXP_START","trim","value","replace","trimChars","chars","RegExp","trimInv"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/string/trim.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * @module helpers/string\n */\nimport { INVISIBLE_SPACE_REG_EXP_END, INVISIBLE_SPACE_REG_EXP_START, SPACE_REG_EXP_END, SPACE_REG_EXP_START } from \"../../constants.js\";\n/**\n * It clears the line of all auxiliary invisible characters , from the spaces and line breaks , tabs\n * from the beginning and end of the line\n */\nexport function trim(value) {\n    return value\n        .replace(SPACE_REG_EXP_END(), '')\n        .replace(SPACE_REG_EXP_START(), '');\n}\nexport function trimChars(value, chars) {\n    return value\n        .replace(RegExp(`[${chars}]+$`), '')\n        .replace(RegExp(`^[${chars}]+`), '');\n}\n/**\n * Trim only invisible chars\n */\nexport function trimInv(value) {\n    return value\n        .replace(INVISIBLE_SPACE_REG_EXP_END(), '')\n        .replace(INVISIBLE_SPACE_REG_EXP_START(), '');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,2BAA2B,EAAEC,6BAA6B,EAAEC,iBAAiB,EAAEC,mBAAmB,QAAQ,oBAAoB;AACvI;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,KAAK,EAAE;EACxB,OAAOA,KAAK,CACPC,OAAO,CAACJ,iBAAiB,CAAC,CAAC,EAAE,EAAE,CAAC,CAChCI,OAAO,CAACH,mBAAmB,CAAC,CAAC,EAAE,EAAE,CAAC;AAC3C;AACA,OAAO,SAASI,SAASA,CAACF,KAAK,EAAEG,KAAK,EAAE;EACpC,OAAOH,KAAK,CACPC,OAAO,CAACG,MAAM,CAAC,IAAID,KAAK,KAAK,CAAC,EAAE,EAAE,CAAC,CACnCF,OAAO,CAACG,MAAM,CAAC,KAAKD,KAAK,IAAI,CAAC,EAAE,EAAE,CAAC;AAC5C;AACA;AACA;AACA;AACA,OAAO,SAASE,OAAOA,CAACL,KAAK,EAAE;EAC3B,OAAOA,KAAK,CACPC,OAAO,CAACN,2BAA2B,CAAC,CAAC,EAAE,EAAE,CAAC,CAC1CM,OAAO,CAACL,6BAA6B,CAAC,CAAC,EAAE,EAAE,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
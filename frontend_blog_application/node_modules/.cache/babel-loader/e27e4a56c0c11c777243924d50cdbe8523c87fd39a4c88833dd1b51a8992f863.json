{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * Editor options. These can be configured upon the creation of the editor.\n * ```javascript\n * const editor = Jodit.make('#editor', {\n * \t toolbar: true,\n * \t buttons: ['bold', 'italic', 'underline']\n * \t // other options\n * \t // ...\n * });\n * ```\n * @packageDocumentation\n * @module config\n */\nimport * as consts from \"./core/constants.js\";\nimport { globalDocument, globalWindow, INSERT_AS_HTML } from \"./core/constants.js\";\n/**\n * Default Editor's Configuration\n */\nclass Config {\n  constructor() {\n    /**\n     * Use cache for heavy methods\n     */\n    this.cache = true;\n    /**\n     * Timeout of all asynchronous methods\n     */\n    this.defaultTimeout = 100;\n    this.namespace = '';\n    /**\n     * Editor loads completely without plugins. Useful when debugging your own plugin.\n     */\n    this.safeMode = false;\n    /**\n     * Editor's width\n     *\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    width: '100%',\n     * })\n     * ```\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    width: 600, // equivalent for '600px'\n     * })\n     * ```\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    width: 'auto', // autosize\n     * })\n     * ```\n     */\n    this.width = 'auto';\n    /**\n     * Editor's height\n     *\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    height: '100%',\n     * })\n     * ```\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    height: 600, // equivalent for '600px'\n     * })\n     * ```\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    height: 'auto', // default - autosize\n     * })\n     * ```\n     */\n    this.height = 'auto';\n    /**\n     * List of plugins that will be initialized in safe mode.\n     *\n     * ```js\n     * Jodit.make('#editor', {\n     * \tsafeMode: true,\n     * \tsafePluginsList: ['about'],\n     * \textraPlugins: ['yourPluginDev']\n     * });\n     * ```\n     */\n    this.safePluginsList = ['about', 'enter', 'backspace', 'size', 'bold', 'hotkeys'];\n    /**\n     * Reserved for the paid version of the editor\n     */\n    this.license = '';\n    /**\n     * The name of the preset that will be used to initialize the editor.\n     * The list of available presets can be found here Jodit.defaultOptions.presets\n     * ```javascript\n     * Jodit.make('.editor', {\n     * \tpreset: 'inline'\n     * });\n     * ```\n     */\n    this.preset = 'custom';\n    this.presets = {\n      inline: {\n        inline: true,\n        toolbar: false,\n        toolbarInline: true,\n        toolbarInlineForSelection: true,\n        showXPathInStatusbar: false,\n        showCharsCounter: false,\n        showWordsCounter: false,\n        showPlaceholder: false\n      }\n    };\n    this.ownerDocument = globalDocument;\n    /**\n     * Allows you to specify the window in which the editor will be created. Default - window\n     * This is necessary if you are creating the editor inside an iframe but the code is running in the parent window\n     */\n    this.ownerWindow = globalWindow;\n    /**\n     * Shadow root if Jodit was created in it\n     *\n     * ```html\n     * <div id=\"editor\"></div>\n     * ```\n     *\n     * ```js\n     * const app = document.getElementById('editor');\n     * app.attachShadow({ mode: 'open' });\n     * const root = app.shadowRoot;\n     *\n     * root.innerHTML = `\n     * <link rel=\"stylesheet\" href=\"./build/jodit.css\"/>\n     * <h1>Jodit example in Shadow DOM</h1>\n     * <div id=\"edit\"></div>\n     * `;\n     *\n     * const editor = Jodit.make(root.getElementById('edit'), {\n     * \tglobalFullSize: false,\n     * \tshadowRoot: root\n     * });\n     * editor.value = '<p>start</p>';\n     * ```\n     */\n    this.shadowRoot = null;\n    /**\n     * z-index For editor\n     */\n    this.zIndex = 0;\n    /**\n     * Change the read-only state of the editor\n     */\n    this.readonly = false;\n    /**\n     * Change the disabled state of the editor\n     */\n    this.disabled = false;\n    /**\n     * In readOnly mode, some buttons can still be useful, for example, the button to view source code or print\n     */\n    this.activeButtonsInReadOnly = ['source', 'fullsize', 'print', 'about', 'dots', 'selectall'];\n    /**\n     * When the editor is in read-only mode, some commands can still be executed:\n     * ```javascript\n     * const editor = Jodit.make('.editor', {\n     * \t allowCommandsInReadOnly: ['selectall', 'preview', 'print']\n     * \t readonly: true\n     * });\n     * editor.execCommand('selectall');// will be selected all content\n     * editor.execCommand('delete');// but content will not be deleted\n     * ```\n     */\n    this.allowCommandsInReadOnly = ['selectall', 'preview', 'print'];\n    /**\n     * Size of icons in the toolbar (can be \"small\", \"middle\", \"large\")\n     *\n     * @example\n     * ```javascript\n     * const editor = Jodit.make(\".dark_editor\", {\n     *      toolbarButtonSize: \"small\"\n     * });\n     * ```\n     */\n    this.toolbarButtonSize = 'middle';\n    /**\n     * Allow navigation in the toolbar of the editor by Tab key\n     */\n    this.allowTabNavigation = false;\n    /**\n     * Inline editing mode\n     */\n    this.inline = false;\n    /**\n     * Theme (can be \"dark\")\n     * @example\n     * ```javascript\n     * const editor = Jodit.make(\".dark_editor\", {\n     *      theme: \"dark\"\n     * });\n     * ```\n     */\n    this.theme = 'default';\n    /**\n     * if set true, then the current mode is saved in a cookie, and is restored after a reload of the page\n     */\n    this.saveModeInStorage = false;\n    /**\n     * Class name that can be appended to the editable area\n     *\n     * @see [[Config.iframeCSSLinks]]\n     * @see [[Config.iframeStyle]]\n     *\n     * @example\n     * ```javascript\n     * Jodit.make('#editor', {\n     *    editorClassName: 'some_my_class'\n     * });\n     * ```\n     * ```html\n     * <style>\n     * .some_my_class p{\n     *    line-height: 16px;\n     * }\n     * </style>\n     * ```\n     */\n    this.editorClassName = false;\n    /**\n     * Class name that can be appended to the main editor container\n     * @example\n     * ```javascript\n     * const jodit = Jodit.make('#editor', {\n     *    className: 'some_my_class'\n     * });\n     *\n     * console.log(jodit.container.classList.contains('some_my_class')); // true\n     * ```\n     * ```html\n     * <style>\n     * .some_my_class {\n     *    max-width: 600px;\n     *    margin: 0 auto;\n     * }\n     * </style>\n     * ```\n     */\n    this.className = false;\n    /**\n     * The internal styles of the editable area. They are intended to change\n     * not the appearance of the editor, but to change the appearance of the content.\n     * @example\n     * ```javascript\n     * Jodit.make('#editor', {\n     * \t\tstyle: {\n     * \t\t font: '12px Arial',\n     * \t\t color: '#0c0c0c'\n     * \t\t}\n     * });\n     * ```\n     */\n    this.style = false;\n    /**\n     *\n     * @example\n     * ```javascript\n     * Jodit.make('#editor', {\n     * \t\teditorStyle: {\n     * \t\t font: '12px Arial',\n     * \t\t color: '#0c0c0c'\n     * \t\t}\n     * });\n     * ```\n     */\n    this.containerStyle = false;\n    /**\n     * Dictionary of variable values in css, a complete list can be found here\n     * https://github.com/xdan/jodit/blob/main/src/styles/variables.less#L25\n     *\n     * @example\n     * ```js\n     * const editor = Jodit.make('#editor', {\n     *   styleValues: {\n     *\t\t'color-text': 'red',\n     *\t\tcolorBorder: 'black',\n     *\t\t'color-panel': 'blue'\n     *   }\n     * });\n     * ```\n     */\n    this.styleValues = {};\n    /**\n     * After all, changes in editors for textarea will call change trigger\n     *\n     * @example\n     * ```javascript\n     * const editor = Jodit.make('#editor');\n     * document.getElementById('editor').addEventListener('change', function () {\n     *      console.log(this.value);\n     * })\n     * ```\n     */\n    this.triggerChangeEvent = true;\n    /**\n     * The writing direction of the language which is used to create editor content. Allowed values are: ''\n     * (an empty string) – Indicates that content direction will be the same as either the editor UI direction or\n     * the page element direction. 'ltr' – Indicates a Left-To-Right text direction (like in English).\n     * 'rtl' – Indicates a Right-To-Left text direction (like in Arabic).\n     *\n     * @example\n     * ```javascript\n     * Jodit.make('.editor', {\n     *    direction: 'rtl'\n     * })\n     * ```\n     */\n    this.direction = '';\n    /**\n     * Language by default. if `auto` language set by document.documentElement.lang ||\n     * (navigator.language && navigator.language.substr(0, 2)) ||\n     * (navigator.browserLanguage && navigator.browserLanguage.substr(0, 2)) || 'en'\n     *\n     * @example\n     * ```html\n     * <!-- include in you page lang file -->\n     * <script src=\"jodit/lang/de.js\"></script>\n     * <script>\n     * var editor = Jodit.make('.editor', {\n     *    language: 'de'\n     * });\n     * </script>\n     * ```\n     */\n    this.language = 'auto';\n    /**\n     * if true all Lang.i18n(key) return `{key}`\n     *\n     * @example\n     * ```html\n     * <script>\n     * var editor = Jodit.make('.editor', {\n     *    debugLanguage: true\n     * });\n     *\n     * console.log(editor.i18n(\"Test\")); // {Test}\n     * </script>\n     * ```\n     */\n    this.debugLanguage = false;\n    /**\n     * Collection of language pack data `{en: {'Type something': 'Type something', ...}}`\n     *\n     * @example\n     * ```javascript\n     * const editor = Jodit.make('#editor', {\n     *     language: 'ru',\n     *     i18n: {\n     *         ru: {\n     *            'Type something': 'Начните что-либо вводить'\n     *         }\n     *     }\n     * });\n     * console.log(editor.i18n('Type something')) //Начните что-либо вводить\n     * ```\n     */\n    this.i18n = false;\n    /**\n     * The tabindex global attribute is an integer indicating if the element can take\n     * input focus (is focusable), if it should participate to sequential keyboard navigation,\n     * and if so, at what position. It can take several values\n     */\n    this.tabIndex = -1;\n    /**\n     * Boolean, whether the toolbar should be shown.\n     * Alternatively, a valid css-selector-string to use an element as toolbar container.\n     */\n    this.toolbar = true;\n    /**\n     * Boolean, whether the statusbar should be shown.\n     */\n    this.statusbar = true;\n    /**\n     * Show tooltip after mouse enter on the button\n     */\n    this.showTooltip = true;\n    /**\n     * Delay before show tooltip\n     */\n    this.showTooltipDelay = 200;\n    /**\n     * Instead of create custop tooltip - use native title tooltips\n     */\n    this.useNativeTooltip = false;\n    /**\n     * Default insert method\n     * @default insert_as_html\n     */\n    this.defaultActionOnPaste = INSERT_AS_HTML;\n    // TODO\n    // autosave: false, // false or url\n    // autosaveCallback: false, // function\n    // interval: 60, // seconds\n    // TODO\n    /**\n     * Element that will be created when you press Enter\n     */\n    this.enter = consts.PARAGRAPH;\n    /**\n     * When this option is enabled, the editor's content will be placed in an iframe and isolated from the rest of the page.\n     *\n     * @example\n     * ```javascript\n     * Jodit.make('#editor', {\n     *    iframe: true,\n     *    iframeStyle: 'html{margin: 0px;}body{padding:10px;background:transparent;color:#000;position:relative;z-index:2;\\\n     *    user-select:auto;margin:0px;overflow:hidden;}body:after{content:\"\";clear:both;display:block}';\n     * });\n     * ```\n     */\n    this.iframe = false;\n    /**\n     * Allow editing the entire HTML document(html, head)\n     * \\> Works together with the iframe option.\n     * @example\n     * ```js\n     * const editor = Jodit.make('#editor', {\n     *   iframe: true,\n     *   editHTMLDocumentMode: true\n     * });\n     * editor.value = '<!DOCTYPE html><html lang=\"en\" style=\"overflow-y:hidden\">' +\n     * \t'<head><title>Jodit Editor</title></head>' +\n     * \t'<body spellcheck=\"false\"><p>Some text</p><p> a </p></body>' +\n     * \t'</html>';\n     * ```\n     */\n    this.editHTMLDocumentMode = false;\n    /**\n     * Use when you need to insert new block element\n     * use enter option if not set\n     */\n    this.enterBlock = this.enter !== 'br' ? this.enter : consts.PARAGRAPH;\n    /**\n     * Jodit.MODE_WYSIWYG The HTML editor allows you to write like MSWord,\n     * Jodit.MODE_SOURCE syntax highlighting source editor\n     * @example\n     * ```javascript\n     * var editor = Jodit.make('#editor', {\n     *     defaultMode: Jodit.MODE_SPLIT\n     * });\n     * console.log(editor.getRealMode())\n     * ```\n     */\n    this.defaultMode = consts.MODE_WYSIWYG;\n    /**\n     * Use split mode\n     */\n    this.useSplitMode = false;\n    /**\n     * The colors in HEX representation to select a color for the background and for the text in colorpicker\n     * @example\n     * ```javascript\n     *  Jodit.make('#editor', {\n     *     colors: ['#ff0000', '#00ff00', '#0000ff']\n     * })\n     * ```\n     */\n    this.colors = {\n      greyscale: ['#000000', '#434343', '#666666', '#999999', '#B7B7B7', '#CCCCCC', '#D9D9D9', '#EFEFEF', '#F3F3F3', '#FFFFFF'],\n      palette: ['#980000', '#FF0000', '#FF9900', '#FFFF00', '#00F0F0', '#00FFFF', '#4A86E8', '#0000FF', '#9900FF', '#FF00FF'],\n      full: ['#E6B8AF', '#F4CCCC', '#FCE5CD', '#FFF2CC', '#D9EAD3', '#D0E0E3', '#C9DAF8', '#CFE2F3', '#D9D2E9', '#EAD1DC', '#DD7E6B', '#EA9999', '#F9CB9C', '#FFE599', '#B6D7A8', '#A2C4C9', '#A4C2F4', '#9FC5E8', '#B4A7D6', '#D5A6BD', '#CC4125', '#E06666', '#F6B26B', '#FFD966', '#93C47D', '#76A5AF', '#6D9EEB', '#6FA8DC', '#8E7CC3', '#C27BA0', '#A61C00', '#CC0000', '#E69138', '#F1C232', '#6AA84F', '#45818E', '#3C78D8', '#3D85C6', '#674EA7', '#A64D79', '#85200C', '#990000', '#B45F06', '#BF9000', '#38761D', '#134F5C', '#1155CC', '#0B5394', '#351C75', '#733554', '#5B0F00', '#660000', '#783F04', '#7F6000', '#274E13', '#0C343D', '#1C4587', '#073763', '#20124D', '#4C1130']\n    };\n    /**\n     * The default tab color picker\n     * @example\n     * ```javascript\n     * Jodit.make('#editor2', {\n     *     colorPickerDefaultTab: 'color'\n     * })\n     * ```\n     */\n    this.colorPickerDefaultTab = 'background';\n    /**\n     * Image size defaults to a larger image\n     */\n    this.imageDefaultWidth = 300;\n    /**\n     * Do not display these buttons that are on the list\n     * @example\n     * ```javascript\n     * Jodit.make('#editor2', {\n     *     removeButtons: ['hr', 'source']\n     * });\n     * ```\n     */\n    this.removeButtons = [];\n    /**\n     * Do not init these plugins\n     * @example\n     * ```typescript\n     * var editor = Jodit.make('.editor', {\n     *    disablePlugins: 'table,iframe'\n     * });\n     * //or\n     * var editor = Jodit.make('.editor', {\n     *    disablePlugins: ['table', 'iframe']\n     * });\n     * ```\n     */\n    this.disablePlugins = [];\n    /**\n     * Init and download extra plugins\n     * @example\n     * ```typescript\n     * var editor = Jodit.make('.editor', {\n     *    extraPlugins: ['emoji']\n     * });\n     * ```\n     * It will try load %SCRIPT_PATH%/plugins/emoji/emoji.js and after load will try init it\n     */\n    this.extraPlugins = [];\n    /**\n     * These buttons list will be added to the option. Buttons\n     */\n    this.extraButtons = [];\n    /**\n     * By default, you can only install an icon from the Jodit suite.\n     * You can add your icon to the set using the `Jodit.modules.Icon.set (name, svg Code)` method.\n     * But for a declarative declaration, you can use this option.\n     *\n     * @example\n     * ```js\n     * Jodit.modules.Icon.set('someIcon', '<svg><path.../></svg>');\n     * const editor = Jodit.make({\n     *   extraButtons: [{\n     *     name: 'someButton',\n     *     icon: 'someIcon'\n     *   }]\n     * });\n     *\n     * @example\n     * const editor = Jodit.make({\n     *   extraIcons: {\n     *     someIcon: '<svg><path.../></svg>'\n     *   },\n     *   extraButtons: [{\n     *     name: 'someButton',\n     *     icon: 'someIcon'\n     *   }]\n     * });\n     * ```\n     * @example\n     * ```js\n     * const editor = Jodit.make({\n     *   extraButtons: [{\n     *     name: 'someButton',\n     *     icon: '<svg><path.../></svg>'\n     *   }]\n     * });\n     * ```\n     */\n    this.extraIcons = {};\n    /**\n     * Default attributes for created inside editor elements\n     * @example\n     * ```js\n     * const editor2 = Jodit.make('#editor', {\n     * \tcreateAttributes: {\n     * \t\tdiv: {\n     * \t\t\tclass: 'test'\n     * \t\t},\n     * \t\tul: function (ul) {\n     * \t\t\tul.classList.add('ui-test');\n     * \t\t}\n     * \t}\n     * });\n     *\n     * const div2 = editor2.createInside.div();\n     * expect(div2.className).equals('test');\n     *\n     * const ul = editor2.createInside.element('ul');\n     * expect(ul.className).equals('ui-test');\n     * ```\n     * Or JSX in React\n     * @example\n     * ```jsx\n     * import React, {useState, useRef} from 'react';\n     * import JoditEditor from \"jodit-react\";\n     *\n     * const config = {\n     * \tcreateAttributes: {\n     * \t\tdiv: {\n     * \t\t\tclass: 'align-center'\n     * \t\t}\n     * \t}\n     * };\n     *\n     * <JoditEditor config={config}/>\n     * ```\n     */\n    this.createAttributes = {\n      table: {\n        style: 'border-collapse:collapse;width: 100%;'\n      }\n    };\n    /**\n     * The width of the editor, accepted as the biggest. Used to the responsive version of the editor\n     */\n    this.sizeLG = 900;\n    /**\n     * The width of the editor, accepted as the medium. Used to the responsive version of the editor\n     */\n    this.sizeMD = 700;\n    /**\n     * The width of the editor, accepted as the small. Used to the responsive version of the editor\n     */\n    this.sizeSM = 400;\n    /**\n     * The list of buttons that appear in the editor's toolbar on large places (≥ options.sizeLG).\n     * Note - this is not the width of the device, the width of the editor\n     * @example\n     * ```javascript\n     * Jodit.make('#editor', {\n     *     buttons: ['bold', 'italic', 'source'],\n     *     buttonsMD: ['bold', 'italic'],\n     *     buttonsXS: ['bold', 'fullsize'],\n     * });\n     * ```\n     * @example\n     * ```javascript\n     * Jodit.make('#editor2', {\n     *     buttons: [{\n     *         name: 'empty',\n     *         icon: 'source',\n     *         exec: function (editor) {\n     *             const dialog = new Jodit.modules.Dialog({}),\n     *                 text = editor.c.element('textarea');\n     *\n     *             dialog.setHeader('Source code');\n     *             dialog.setContent(text);\n     *             dialog.setSize(400, 300);\n     *\n     *             Jodit.modules.Helpers.css(elm, {\n     *                 width: '100%',\n     *                 height: '100%'\n     *             })\n          *             dialog.open();\n     *         }\n     *     }]\n     * });\n     * ```\n     * @example\n     * ```javascript\n     * Jodit.make('#editor2', {\n     *     buttons: Jodit.defaultOptions.buttons.concat([{\n     *        name: 'listsss',\n     *        iconURL: 'stuf/dummy.png',\n     *        list: {\n     *            h1: 'insert Header 1',\n     *            h2: 'insert Header 2',\n     *            clear: 'Empty editor',\n     *        },\n     *        exec: ({originalEvent, control, btn}) => {\n     *             var key = control.args[0],\n     *                value = control.args[1];\n     *             if (key === 'clear') {\n     *                 this.val('');\n     *                 return;\n     *             }\n     *             this.s.insertNode(this.c.element(key, ''));\n     *             this.message.info('Was inserted ' + value);\n     *        },\n     *        template: function (key, value) {\n     *            return '<div>' + value + '</div>';\n     *        }\n     *  });\n     * ```\n     */\n    this.buttons = [{\n      group: 'font-style',\n      buttons: []\n    }, {\n      group: 'list',\n      buttons: []\n    }, {\n      group: 'font',\n      buttons: []\n    }, '---', {\n      group: 'script',\n      buttons: []\n    }, {\n      group: 'media',\n      buttons: []\n    }, '\\n', {\n      group: 'state',\n      buttons: []\n    }, {\n      group: 'clipboard',\n      buttons: []\n    }, {\n      group: 'insert',\n      buttons: []\n    }, {\n      group: 'indent',\n      buttons: []\n    }, {\n      group: 'color',\n      buttons: []\n    }, {\n      group: 'form',\n      buttons: []\n    }, '---', {\n      group: 'history',\n      buttons: []\n    }, {\n      group: 'search',\n      buttons: []\n    }, {\n      group: 'source',\n      buttons: []\n    }, {\n      group: 'other',\n      buttons: []\n    }, {\n      group: 'info',\n      buttons: []\n    }];\n    /**\n     * Some events are called when the editor is initialized, for example, the `afterInit` event.\n     * So this code won't work:\n     * ```javascript\n     * const editor = Jodit.make('#editor');\n     * editor.events.on('afterInit', () => console.log('afterInit'));\n     * ```\n     * You need to do this:\n     * ```javascript\n     * Jodit.make('#editor', {\n     * \t\tevents: {\n     * \t  \tafterInit: () => console.log('afterInit')\n     * \t\t}\n     * });\n     * ```\n     * The option can use any Jodit events, for example:\n     * ```javascript\n     * const editor = Jodit.make('#editor', {\n     * \t\tevents: {\n     * \t\t\thello: (name) => console.log('Hello', name)\n     * \t\t}\n     * });\n     * editor.e.fire('hello', 'Mike');\n     * ```\n     */\n    this.events = {};\n    /**\n     * Buttons in toolbat without SVG - only texts\n     */\n    this.textIcons = false;\n    /**\n     * Element for dialog container\n     */\n    this.popupRoot = null;\n    /**\n     * shows a INPUT[type=color] to open the browser color picker, on the right bottom of widget color picker\n     */\n    this.showBrowserColorPicker = true;\n  }\n  static get defaultOptions() {\n    if (!Config.__defaultOptions) {\n      Config.__defaultOptions = new Config();\n    }\n    return Config.__defaultOptions;\n  }\n}\nConfig.prototype.controls = {};\nexport { Config };","map":{"version":3,"names":["consts","globalDocument","globalWindow","INSERT_AS_HTML","Config","constructor","cache","defaultTimeout","namespace","safeMode","width","height","safePluginsList","license","preset","presets","inline","toolbar","toolbarInline","toolbarInlineForSelection","showXPathInStatusbar","showCharsCounter","showWordsCounter","showPlaceholder","ownerDocument","ownerWindow","shadowRoot","zIndex","readonly","disabled","activeButtonsInReadOnly","allowCommandsInReadOnly","toolbarButtonSize","allowTabNavigation","theme","saveModeInStorage","editorClassName","className","style","containerStyle","styleValues","triggerChangeEvent","direction","language","debugLanguage","i18n","tabIndex","statusbar","showTooltip","showTooltipDelay","useNativeTooltip","defaultActionOnPaste","enter","PARAGRAPH","iframe","editHTMLDocumentMode","enterBlock","defaultMode","MODE_WYSIWYG","useSplitMode","colors","greyscale","palette","full","colorPickerDefaultTab","imageDefaultWidth","removeButtons","disablePlugins","extraPlugins","extraButtons","extraIcons","createAttributes","table","sizeLG","sizeMD","sizeSM","buttons","group","events","textIcons","popupRoot","showBrowserColorPicker","defaultOptions","__defaultOptions","prototype","controls"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/config.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\n/**\n * Editor options. These can be configured upon the creation of the editor.\n * ```javascript\n * const editor = Jodit.make('#editor', {\n * \t toolbar: true,\n * \t buttons: ['bold', 'italic', 'underline']\n * \t // other options\n * \t // ...\n * });\n * ```\n * @packageDocumentation\n * @module config\n */\nimport * as consts from \"./core/constants.js\";\nimport { globalDocument, globalWindow, INSERT_AS_HTML } from \"./core/constants.js\";\n/**\n * Default Editor's Configuration\n */\nclass Config {\n    constructor() {\n        /**\n         * Use cache for heavy methods\n         */\n        this.cache = true;\n        /**\n         * Timeout of all asynchronous methods\n         */\n        this.defaultTimeout = 100;\n        this.namespace = '';\n        /**\n         * Editor loads completely without plugins. Useful when debugging your own plugin.\n         */\n        this.safeMode = false;\n        /**\n         * Editor's width\n         *\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    width: '100%',\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    width: 600, // equivalent for '600px'\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    width: 'auto', // autosize\n         * })\n         * ```\n         */\n        this.width = 'auto';\n        /**\n         * Editor's height\n         *\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    height: '100%',\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    height: 600, // equivalent for '600px'\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    height: 'auto', // default - autosize\n         * })\n         * ```\n         */\n        this.height = 'auto';\n        /**\n         * List of plugins that will be initialized in safe mode.\n         *\n         * ```js\n         * Jodit.make('#editor', {\n         * \tsafeMode: true,\n         * \tsafePluginsList: ['about'],\n         * \textraPlugins: ['yourPluginDev']\n         * });\n         * ```\n         */\n        this.safePluginsList = [\n            'about',\n            'enter',\n            'backspace',\n            'size',\n            'bold',\n            'hotkeys'\n        ];\n        /**\n         * Reserved for the paid version of the editor\n         */\n        this.license = '';\n        /**\n         * The name of the preset that will be used to initialize the editor.\n         * The list of available presets can be found here Jodit.defaultOptions.presets\n         * ```javascript\n         * Jodit.make('.editor', {\n         * \tpreset: 'inline'\n         * });\n         * ```\n         */\n        this.preset = 'custom';\n        this.presets = {\n            inline: {\n                inline: true,\n                toolbar: false,\n                toolbarInline: true,\n                toolbarInlineForSelection: true,\n                showXPathInStatusbar: false,\n                showCharsCounter: false,\n                showWordsCounter: false,\n                showPlaceholder: false\n            }\n        };\n        this.ownerDocument = globalDocument;\n        /**\n         * Allows you to specify the window in which the editor will be created. Default - window\n         * This is necessary if you are creating the editor inside an iframe but the code is running in the parent window\n         */\n        this.ownerWindow = globalWindow;\n        /**\n         * Shadow root if Jodit was created in it\n         *\n         * ```html\n         * <div id=\"editor\"></div>\n         * ```\n         *\n         * ```js\n         * const app = document.getElementById('editor');\n         * app.attachShadow({ mode: 'open' });\n         * const root = app.shadowRoot;\n         *\n         * root.innerHTML = `\n         * <link rel=\"stylesheet\" href=\"./build/jodit.css\"/>\n         * <h1>Jodit example in Shadow DOM</h1>\n         * <div id=\"edit\"></div>\n         * `;\n         *\n         * const editor = Jodit.make(root.getElementById('edit'), {\n         * \tglobalFullSize: false,\n         * \tshadowRoot: root\n         * });\n         * editor.value = '<p>start</p>';\n         * ```\n         */\n        this.shadowRoot = null;\n        /**\n         * z-index For editor\n         */\n        this.zIndex = 0;\n        /**\n         * Change the read-only state of the editor\n         */\n        this.readonly = false;\n        /**\n         * Change the disabled state of the editor\n         */\n        this.disabled = false;\n        /**\n         * In readOnly mode, some buttons can still be useful, for example, the button to view source code or print\n         */\n        this.activeButtonsInReadOnly = [\n            'source',\n            'fullsize',\n            'print',\n            'about',\n            'dots',\n            'selectall'\n        ];\n        /**\n         * When the editor is in read-only mode, some commands can still be executed:\n         * ```javascript\n         * const editor = Jodit.make('.editor', {\n         * \t allowCommandsInReadOnly: ['selectall', 'preview', 'print']\n         * \t readonly: true\n         * });\n         * editor.execCommand('selectall');// will be selected all content\n         * editor.execCommand('delete');// but content will not be deleted\n         * ```\n         */\n        this.allowCommandsInReadOnly = ['selectall', 'preview', 'print'];\n        /**\n         * Size of icons in the toolbar (can be \"small\", \"middle\", \"large\")\n         *\n         * @example\n         * ```javascript\n         * const editor = Jodit.make(\".dark_editor\", {\n         *      toolbarButtonSize: \"small\"\n         * });\n         * ```\n         */\n        this.toolbarButtonSize = 'middle';\n        /**\n         * Allow navigation in the toolbar of the editor by Tab key\n         */\n        this.allowTabNavigation = false;\n        /**\n         * Inline editing mode\n         */\n        this.inline = false;\n        /**\n         * Theme (can be \"dark\")\n         * @example\n         * ```javascript\n         * const editor = Jodit.make(\".dark_editor\", {\n         *      theme: \"dark\"\n         * });\n         * ```\n         */\n        this.theme = 'default';\n        /**\n         * if set true, then the current mode is saved in a cookie, and is restored after a reload of the page\n         */\n        this.saveModeInStorage = false;\n        /**\n         * Class name that can be appended to the editable area\n         *\n         * @see [[Config.iframeCSSLinks]]\n         * @see [[Config.iframeStyle]]\n         *\n         * @example\n         * ```javascript\n         * Jodit.make('#editor', {\n         *    editorClassName: 'some_my_class'\n         * });\n         * ```\n         * ```html\n         * <style>\n         * .some_my_class p{\n         *    line-height: 16px;\n         * }\n         * </style>\n         * ```\n         */\n        this.editorClassName = false;\n        /**\n         * Class name that can be appended to the main editor container\n         * @example\n         * ```javascript\n         * const jodit = Jodit.make('#editor', {\n         *    className: 'some_my_class'\n         * });\n         *\n         * console.log(jodit.container.classList.contains('some_my_class')); // true\n         * ```\n         * ```html\n         * <style>\n         * .some_my_class {\n         *    max-width: 600px;\n         *    margin: 0 auto;\n         * }\n         * </style>\n         * ```\n         */\n        this.className = false;\n        /**\n         * The internal styles of the editable area. They are intended to change\n         * not the appearance of the editor, but to change the appearance of the content.\n         * @example\n         * ```javascript\n         * Jodit.make('#editor', {\n         * \t\tstyle: {\n         * \t\t font: '12px Arial',\n         * \t\t color: '#0c0c0c'\n         * \t\t}\n         * });\n         * ```\n         */\n        this.style = false;\n        /**\n         *\n         * @example\n         * ```javascript\n         * Jodit.make('#editor', {\n         * \t\teditorStyle: {\n         * \t\t font: '12px Arial',\n         * \t\t color: '#0c0c0c'\n         * \t\t}\n         * });\n         * ```\n         */\n        this.containerStyle = false;\n        /**\n         * Dictionary of variable values in css, a complete list can be found here\n         * https://github.com/xdan/jodit/blob/main/src/styles/variables.less#L25\n         *\n         * @example\n         * ```js\n         * const editor = Jodit.make('#editor', {\n         *   styleValues: {\n         *\t\t'color-text': 'red',\n         *\t\tcolorBorder: 'black',\n         *\t\t'color-panel': 'blue'\n         *   }\n         * });\n         * ```\n         */\n        this.styleValues = {};\n        /**\n         * After all, changes in editors for textarea will call change trigger\n         *\n         * @example\n         * ```javascript\n         * const editor = Jodit.make('#editor');\n         * document.getElementById('editor').addEventListener('change', function () {\n         *      console.log(this.value);\n         * })\n         * ```\n         */\n        this.triggerChangeEvent = true;\n        /**\n         * The writing direction of the language which is used to create editor content. Allowed values are: ''\n         * (an empty string) – Indicates that content direction will be the same as either the editor UI direction or\n         * the page element direction. 'ltr' – Indicates a Left-To-Right text direction (like in English).\n         * 'rtl' – Indicates a Right-To-Left text direction (like in Arabic).\n         *\n         * @example\n         * ```javascript\n         * Jodit.make('.editor', {\n         *    direction: 'rtl'\n         * })\n         * ```\n         */\n        this.direction = '';\n        /**\n         * Language by default. if `auto` language set by document.documentElement.lang ||\n         * (navigator.language && navigator.language.substr(0, 2)) ||\n         * (navigator.browserLanguage && navigator.browserLanguage.substr(0, 2)) || 'en'\n         *\n         * @example\n         * ```html\n         * <!-- include in you page lang file -->\n         * <script src=\"jodit/lang/de.js\"></script>\n         * <script>\n         * var editor = Jodit.make('.editor', {\n         *    language: 'de'\n         * });\n         * </script>\n         * ```\n         */\n        this.language = 'auto';\n        /**\n         * if true all Lang.i18n(key) return `{key}`\n         *\n         * @example\n         * ```html\n         * <script>\n         * var editor = Jodit.make('.editor', {\n         *    debugLanguage: true\n         * });\n         *\n         * console.log(editor.i18n(\"Test\")); // {Test}\n         * </script>\n         * ```\n         */\n        this.debugLanguage = false;\n        /**\n         * Collection of language pack data `{en: {'Type something': 'Type something', ...}}`\n         *\n         * @example\n         * ```javascript\n         * const editor = Jodit.make('#editor', {\n         *     language: 'ru',\n         *     i18n: {\n         *         ru: {\n         *            'Type something': 'Начните что-либо вводить'\n         *         }\n         *     }\n         * });\n         * console.log(editor.i18n('Type something')) //Начните что-либо вводить\n         * ```\n         */\n        this.i18n = false;\n        /**\n         * The tabindex global attribute is an integer indicating if the element can take\n         * input focus (is focusable), if it should participate to sequential keyboard navigation,\n         * and if so, at what position. It can take several values\n         */\n        this.tabIndex = -1;\n        /**\n         * Boolean, whether the toolbar should be shown.\n         * Alternatively, a valid css-selector-string to use an element as toolbar container.\n         */\n        this.toolbar = true;\n        /**\n         * Boolean, whether the statusbar should be shown.\n         */\n        this.statusbar = true;\n        /**\n         * Show tooltip after mouse enter on the button\n         */\n        this.showTooltip = true;\n        /**\n         * Delay before show tooltip\n         */\n        this.showTooltipDelay = 200;\n        /**\n         * Instead of create custop tooltip - use native title tooltips\n         */\n        this.useNativeTooltip = false;\n        /**\n         * Default insert method\n         * @default insert_as_html\n         */\n        this.defaultActionOnPaste = INSERT_AS_HTML;\n        // TODO\n        // autosave: false, // false or url\n        // autosaveCallback: false, // function\n        // interval: 60, // seconds\n        // TODO\n        /**\n         * Element that will be created when you press Enter\n         */\n        this.enter = consts.PARAGRAPH;\n        /**\n         * When this option is enabled, the editor's content will be placed in an iframe and isolated from the rest of the page.\n         *\n         * @example\n         * ```javascript\n         * Jodit.make('#editor', {\n         *    iframe: true,\n         *    iframeStyle: 'html{margin: 0px;}body{padding:10px;background:transparent;color:#000;position:relative;z-index:2;\\\n         *    user-select:auto;margin:0px;overflow:hidden;}body:after{content:\"\";clear:both;display:block}';\n         * });\n         * ```\n         */\n        this.iframe = false;\n        /**\n         * Allow editing the entire HTML document(html, head)\n         * \\> Works together with the iframe option.\n         * @example\n         * ```js\n         * const editor = Jodit.make('#editor', {\n         *   iframe: true,\n         *   editHTMLDocumentMode: true\n         * });\n         * editor.value = '<!DOCTYPE html><html lang=\"en\" style=\"overflow-y:hidden\">' +\n         * \t'<head><title>Jodit Editor</title></head>' +\n         * \t'<body spellcheck=\"false\"><p>Some text</p><p> a </p></body>' +\n         * \t'</html>';\n         * ```\n         */\n        this.editHTMLDocumentMode = false;\n        /**\n         * Use when you need to insert new block element\n         * use enter option if not set\n         */\n        this.enterBlock = this.enter !== 'br' ? this.enter : consts.PARAGRAPH;\n        /**\n         * Jodit.MODE_WYSIWYG The HTML editor allows you to write like MSWord,\n         * Jodit.MODE_SOURCE syntax highlighting source editor\n         * @example\n         * ```javascript\n         * var editor = Jodit.make('#editor', {\n         *     defaultMode: Jodit.MODE_SPLIT\n         * });\n         * console.log(editor.getRealMode())\n         * ```\n         */\n        this.defaultMode = consts.MODE_WYSIWYG;\n        /**\n         * Use split mode\n         */\n        this.useSplitMode = false;\n        /**\n         * The colors in HEX representation to select a color for the background and for the text in colorpicker\n         * @example\n         * ```javascript\n         *  Jodit.make('#editor', {\n         *     colors: ['#ff0000', '#00ff00', '#0000ff']\n         * })\n         * ```\n         */\n        this.colors = {\n            greyscale: [\n                '#000000',\n                '#434343',\n                '#666666',\n                '#999999',\n                '#B7B7B7',\n                '#CCCCCC',\n                '#D9D9D9',\n                '#EFEFEF',\n                '#F3F3F3',\n                '#FFFFFF'\n            ],\n            palette: [\n                '#980000',\n                '#FF0000',\n                '#FF9900',\n                '#FFFF00',\n                '#00F0F0',\n                '#00FFFF',\n                '#4A86E8',\n                '#0000FF',\n                '#9900FF',\n                '#FF00FF'\n            ],\n            full: [\n                '#E6B8AF',\n                '#F4CCCC',\n                '#FCE5CD',\n                '#FFF2CC',\n                '#D9EAD3',\n                '#D0E0E3',\n                '#C9DAF8',\n                '#CFE2F3',\n                '#D9D2E9',\n                '#EAD1DC',\n                '#DD7E6B',\n                '#EA9999',\n                '#F9CB9C',\n                '#FFE599',\n                '#B6D7A8',\n                '#A2C4C9',\n                '#A4C2F4',\n                '#9FC5E8',\n                '#B4A7D6',\n                '#D5A6BD',\n                '#CC4125',\n                '#E06666',\n                '#F6B26B',\n                '#FFD966',\n                '#93C47D',\n                '#76A5AF',\n                '#6D9EEB',\n                '#6FA8DC',\n                '#8E7CC3',\n                '#C27BA0',\n                '#A61C00',\n                '#CC0000',\n                '#E69138',\n                '#F1C232',\n                '#6AA84F',\n                '#45818E',\n                '#3C78D8',\n                '#3D85C6',\n                '#674EA7',\n                '#A64D79',\n                '#85200C',\n                '#990000',\n                '#B45F06',\n                '#BF9000',\n                '#38761D',\n                '#134F5C',\n                '#1155CC',\n                '#0B5394',\n                '#351C75',\n                '#733554',\n                '#5B0F00',\n                '#660000',\n                '#783F04',\n                '#7F6000',\n                '#274E13',\n                '#0C343D',\n                '#1C4587',\n                '#073763',\n                '#20124D',\n                '#4C1130'\n            ]\n        };\n        /**\n         * The default tab color picker\n         * @example\n         * ```javascript\n         * Jodit.make('#editor2', {\n         *     colorPickerDefaultTab: 'color'\n         * })\n         * ```\n         */\n        this.colorPickerDefaultTab = 'background';\n        /**\n         * Image size defaults to a larger image\n         */\n        this.imageDefaultWidth = 300;\n        /**\n         * Do not display these buttons that are on the list\n         * @example\n         * ```javascript\n         * Jodit.make('#editor2', {\n         *     removeButtons: ['hr', 'source']\n         * });\n         * ```\n         */\n        this.removeButtons = [];\n        /**\n         * Do not init these plugins\n         * @example\n         * ```typescript\n         * var editor = Jodit.make('.editor', {\n         *    disablePlugins: 'table,iframe'\n         * });\n         * //or\n         * var editor = Jodit.make('.editor', {\n         *    disablePlugins: ['table', 'iframe']\n         * });\n         * ```\n         */\n        this.disablePlugins = [];\n        /**\n         * Init and download extra plugins\n         * @example\n         * ```typescript\n         * var editor = Jodit.make('.editor', {\n         *    extraPlugins: ['emoji']\n         * });\n         * ```\n         * It will try load %SCRIPT_PATH%/plugins/emoji/emoji.js and after load will try init it\n         */\n        this.extraPlugins = [];\n        /**\n         * These buttons list will be added to the option. Buttons\n         */\n        this.extraButtons = [];\n        /**\n         * By default, you can only install an icon from the Jodit suite.\n         * You can add your icon to the set using the `Jodit.modules.Icon.set (name, svg Code)` method.\n         * But for a declarative declaration, you can use this option.\n         *\n         * @example\n         * ```js\n         * Jodit.modules.Icon.set('someIcon', '<svg><path.../></svg>');\n         * const editor = Jodit.make({\n         *   extraButtons: [{\n         *     name: 'someButton',\n         *     icon: 'someIcon'\n         *   }]\n         * });\n         *\n         * @example\n         * const editor = Jodit.make({\n         *   extraIcons: {\n         *     someIcon: '<svg><path.../></svg>'\n         *   },\n         *   extraButtons: [{\n         *     name: 'someButton',\n         *     icon: 'someIcon'\n         *   }]\n         * });\n         * ```\n         * @example\n         * ```js\n         * const editor = Jodit.make({\n         *   extraButtons: [{\n         *     name: 'someButton',\n         *     icon: '<svg><path.../></svg>'\n         *   }]\n         * });\n         * ```\n         */\n        this.extraIcons = {};\n        /**\n         * Default attributes for created inside editor elements\n         * @example\n         * ```js\n         * const editor2 = Jodit.make('#editor', {\n         * \tcreateAttributes: {\n         * \t\tdiv: {\n         * \t\t\tclass: 'test'\n         * \t\t},\n         * \t\tul: function (ul) {\n         * \t\t\tul.classList.add('ui-test');\n         * \t\t}\n         * \t}\n         * });\n         *\n         * const div2 = editor2.createInside.div();\n         * expect(div2.className).equals('test');\n         *\n         * const ul = editor2.createInside.element('ul');\n         * expect(ul.className).equals('ui-test');\n         * ```\n         * Or JSX in React\n         * @example\n         * ```jsx\n         * import React, {useState, useRef} from 'react';\n         * import JoditEditor from \"jodit-react\";\n         *\n         * const config = {\n         * \tcreateAttributes: {\n         * \t\tdiv: {\n         * \t\t\tclass: 'align-center'\n         * \t\t}\n         * \t}\n         * };\n         *\n         * <JoditEditor config={config}/>\n         * ```\n         */\n        this.createAttributes = {\n            table: {\n                style: 'border-collapse:collapse;width: 100%;'\n            }\n        };\n        /**\n         * The width of the editor, accepted as the biggest. Used to the responsive version of the editor\n         */\n        this.sizeLG = 900;\n        /**\n         * The width of the editor, accepted as the medium. Used to the responsive version of the editor\n         */\n        this.sizeMD = 700;\n        /**\n         * The width of the editor, accepted as the small. Used to the responsive version of the editor\n         */\n        this.sizeSM = 400;\n        /**\n         * The list of buttons that appear in the editor's toolbar on large places (≥ options.sizeLG).\n         * Note - this is not the width of the device, the width of the editor\n         * @example\n         * ```javascript\n         * Jodit.make('#editor', {\n         *     buttons: ['bold', 'italic', 'source'],\n         *     buttonsMD: ['bold', 'italic'],\n         *     buttonsXS: ['bold', 'fullsize'],\n         * });\n         * ```\n         * @example\n         * ```javascript\n         * Jodit.make('#editor2', {\n         *     buttons: [{\n         *         name: 'empty',\n         *         icon: 'source',\n         *         exec: function (editor) {\n         *             const dialog = new Jodit.modules.Dialog({}),\n         *                 text = editor.c.element('textarea');\n         *\n         *             dialog.setHeader('Source code');\n         *             dialog.setContent(text);\n         *             dialog.setSize(400, 300);\n         *\n         *             Jodit.modules.Helpers.css(elm, {\n         *                 width: '100%',\n         *                 height: '100%'\n         *             })\n    \n         *             dialog.open();\n         *         }\n         *     }]\n         * });\n         * ```\n         * @example\n         * ```javascript\n         * Jodit.make('#editor2', {\n         *     buttons: Jodit.defaultOptions.buttons.concat([{\n         *        name: 'listsss',\n         *        iconURL: 'stuf/dummy.png',\n         *        list: {\n         *            h1: 'insert Header 1',\n         *            h2: 'insert Header 2',\n         *            clear: 'Empty editor',\n         *        },\n         *        exec: ({originalEvent, control, btn}) => {\n         *             var key = control.args[0],\n         *                value = control.args[1];\n         *             if (key === 'clear') {\n         *                 this.val('');\n         *                 return;\n         *             }\n         *             this.s.insertNode(this.c.element(key, ''));\n         *             this.message.info('Was inserted ' + value);\n         *        },\n         *        template: function (key, value) {\n         *            return '<div>' + value + '</div>';\n         *        }\n         *  });\n         * ```\n         */\n        this.buttons = [\n            {\n                group: 'font-style',\n                buttons: []\n            },\n            {\n                group: 'list',\n                buttons: []\n            },\n            {\n                group: 'font',\n                buttons: []\n            },\n            '---',\n            {\n                group: 'script',\n                buttons: []\n            },\n            {\n                group: 'media',\n                buttons: []\n            },\n            '\\n',\n            {\n                group: 'state',\n                buttons: []\n            },\n            {\n                group: 'clipboard',\n                buttons: []\n            },\n            {\n                group: 'insert',\n                buttons: []\n            },\n            {\n                group: 'indent',\n                buttons: []\n            },\n            {\n                group: 'color',\n                buttons: []\n            },\n            {\n                group: 'form',\n                buttons: []\n            },\n            '---',\n            {\n                group: 'history',\n                buttons: []\n            },\n            {\n                group: 'search',\n                buttons: []\n            },\n            {\n                group: 'source',\n                buttons: []\n            },\n            {\n                group: 'other',\n                buttons: []\n            },\n            {\n                group: 'info',\n                buttons: []\n            }\n        ];\n        /**\n         * Some events are called when the editor is initialized, for example, the `afterInit` event.\n         * So this code won't work:\n         * ```javascript\n         * const editor = Jodit.make('#editor');\n         * editor.events.on('afterInit', () => console.log('afterInit'));\n         * ```\n         * You need to do this:\n         * ```javascript\n         * Jodit.make('#editor', {\n         * \t\tevents: {\n         * \t  \tafterInit: () => console.log('afterInit')\n         * \t\t}\n         * });\n         * ```\n         * The option can use any Jodit events, for example:\n         * ```javascript\n         * const editor = Jodit.make('#editor', {\n         * \t\tevents: {\n         * \t\t\thello: (name) => console.log('Hello', name)\n         * \t\t}\n         * });\n         * editor.e.fire('hello', 'Mike');\n         * ```\n         */\n        this.events = {};\n        /**\n         * Buttons in toolbat without SVG - only texts\n         */\n        this.textIcons = false;\n        /**\n         * Element for dialog container\n         */\n        this.popupRoot = null;\n        /**\n         * shows a INPUT[type=color] to open the browser color picker, on the right bottom of widget color picker\n         */\n        this.showBrowserColorPicker = true;\n    }\n    static get defaultOptions() {\n        if (!Config.__defaultOptions) {\n            Config.__defaultOptions = new Config();\n        }\n        return Config.__defaultOptions;\n    }\n}\nConfig.prototype.controls = {};\nexport { Config };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,MAAM,MAAM,qBAAqB;AAC7C,SAASC,cAAc,EAAEC,YAAY,EAAEC,cAAc,QAAQ,qBAAqB;AAClF;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACTC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,GAAG;IACzB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB;AACR;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,MAAM;IACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,MAAM;IACpB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,CACnB,OAAO,EACP,OAAO,EACP,WAAW,EACX,MAAM,EACN,MAAM,EACN,SAAS,CACZ;IACD;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,QAAQ;IACtB,IAAI,CAACC,OAAO,GAAG;MACXC,MAAM,EAAE;QACJA,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,yBAAyB,EAAE,IAAI;QAC/BC,oBAAoB,EAAE,KAAK;QAC3BC,gBAAgB,EAAE,KAAK;QACvBC,gBAAgB,EAAE,KAAK;QACvBC,eAAe,EAAE;MACrB;IACJ,CAAC;IACD,IAAI,CAACC,aAAa,GAAGvB,cAAc;IACnC;AACR;AACA;AACA;IACQ,IAAI,CAACwB,WAAW,GAAGvB,YAAY;IAC/B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACwB,UAAU,GAAG,IAAI;IACtB;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,CAAC;IACf;AACR;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACR;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACR;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,CAC3B,QAAQ,EACR,UAAU,EACV,OAAO,EACP,OAAO,EACP,MAAM,EACN,WAAW,CACd;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC;IAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,QAAQ;IACjC;AACR;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,KAAK;IAC/B;AACR;AACA;IACQ,IAAI,CAACjB,MAAM,GAAG,KAAK;IACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACkB,KAAK,GAAG,SAAS;IACtB;AACR;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,KAAK;IAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,MAAM;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB;AACR;AACA;AACA;IACQ,IAAI,CAAC7B,OAAO,GAAG,IAAI;IACnB;AACR;AACA;IACQ,IAAI,CAAC8B,SAAS,GAAG,IAAI;IACrB;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB;AACR;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,GAAG;IAC3B;AACR;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B;AACR;AACA;AACA;IACQ,IAAI,CAACC,oBAAoB,GAAGhD,cAAc;IAC1C;IACA;IACA;IACA;IACA;IACA;AACR;AACA;IACQ,IAAI,CAACiD,KAAK,GAAGpD,MAAM,CAACqD,SAAS;IAC7B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,oBAAoB,GAAG,KAAK;IACjC;AACR;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAI,CAACJ,KAAK,KAAK,IAAI,GAAG,IAAI,CAACA,KAAK,GAAGpD,MAAM,CAACqD,SAAS;IACrE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACI,WAAW,GAAGzD,MAAM,CAAC0D,YAAY;IACtC;AACR;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG;MACVC,SAAS,EAAE,CACP,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACZ;MACDC,OAAO,EAAE,CACL,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACZ;MACDC,IAAI,EAAE,CACF,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS;IAEjB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,YAAY;IACzC;AACR;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,GAAG;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB;AACR;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG;MACpBC,KAAK,EAAE;QACHlC,KAAK,EAAE;MACX;IACJ,CAAC;IACD;AACR;AACA;IACQ,IAAI,CAACmC,MAAM,GAAG,GAAG;IACjB;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,GAAG;IACjB;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,GAAG;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEQ,IAAI,CAACC,OAAO,GAAG,CACX;MACIC,KAAK,EAAE,YAAY;MACnBD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,MAAM;MACbD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,MAAM;MACbD,OAAO,EAAE;IACb,CAAC,EACD,KAAK,EACL;MACIC,KAAK,EAAE,QAAQ;MACfD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,OAAO;MACdD,OAAO,EAAE;IACb,CAAC,EACD,IAAI,EACJ;MACIC,KAAK,EAAE,OAAO;MACdD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,WAAW;MAClBD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,QAAQ;MACfD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,QAAQ;MACfD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,OAAO;MACdD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,MAAM;MACbD,OAAO,EAAE;IACb,CAAC,EACD,KAAK,EACL;MACIC,KAAK,EAAE,SAAS;MAChBD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,QAAQ;MACfD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,QAAQ;MACfD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,OAAO;MACdD,OAAO,EAAE;IACb,CAAC,EACD;MACIC,KAAK,EAAE,MAAM;MACbD,OAAO,EAAE;IACb,CAAC,CACJ;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC;IAChB;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB;AACR;AACA;IACQ,IAAI,CAACC,sBAAsB,GAAG,IAAI;EACtC;EACA,WAAWC,cAAcA,CAAA,EAAG;IACxB,IAAI,CAAC9E,MAAM,CAAC+E,gBAAgB,EAAE;MAC1B/E,MAAM,CAAC+E,gBAAgB,GAAG,IAAI/E,MAAM,CAAC,CAAC;IAC1C;IACA,OAAOA,MAAM,CAAC+E,gBAAgB;EAClC;AACJ;AACA/E,MAAM,CAACgF,SAAS,CAACC,QAAQ,GAAG,CAAC,CAAC;AAC9B,SAASjF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
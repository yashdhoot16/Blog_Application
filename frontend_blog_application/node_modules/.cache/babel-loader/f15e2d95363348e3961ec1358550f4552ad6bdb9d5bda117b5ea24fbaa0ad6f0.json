{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { Dom } from \"../../dom/dom.js\";\nimport { isString } from \"../checker/is-string.js\";\nimport { trim } from \"../string/trim.js\";\nimport { $$ } from \"../utils/index.js\";\nconst NEW_LINE_TAGS = new Set(['div', 'p', 'br', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr']);\nconst INVISIBLE_TAGS = new Set(['script', 'style']);\nconst ALONE_TAGS = new Set(['br', 'hr', 'input']);\n/**\n * Extract plain text from HTML text\n */\nexport function stripTags(html, doc = document, exclude = null) {\n  const tmp = doc.createElement('div');\n  if (isString(html)) {\n    tmp.innerHTML = html;\n  } else {\n    tmp.appendChild(html);\n  }\n  $$('*', tmp).forEach(p => {\n    const pr = p.parentNode;\n    if (!pr) {\n      return;\n    }\n    if (exclude && Dom.isTag(p, exclude)) {\n      const tag = p.nodeName.toLowerCase();\n      const text = !Dom.isTag(p, ALONE_TAGS) ? `%%%jodit-${tag}%%%${stripTags(p.innerHTML, doc, exclude)}%%%/jodit-${tag}%%%` : `%%%jodit-single-${tag}%%%`;\n      Dom.before(p, doc.createTextNode(text));\n      Dom.safeRemove(p);\n      return;\n    }\n    if (Dom.isTag(p, INVISIBLE_TAGS)) {\n      Dom.safeRemove(p);\n      return;\n    }\n    if (!Dom.isTag(p, NEW_LINE_TAGS)) {\n      return;\n    }\n    const nx = p.nextSibling;\n    if (Dom.isText(nx) && /^\\s/.test(nx.nodeValue || '')) {\n      return;\n    }\n    if (nx) {\n      pr.insertBefore(doc.createTextNode(' '), nx);\n    }\n  });\n  return restoreTags(trim(tmp.innerText));\n}\nfunction restoreTags(content) {\n  return content.replace(/%%%(\\/)?jodit(-single)?-([\\w\\n]+)%%%/g, (_, isClosed, isSingle, tag) => `<${isClosed ? '/' : ''}${tag}>`);\n}","map":{"version":3,"names":["Dom","isString","trim","$$","NEW_LINE_TAGS","Set","INVISIBLE_TAGS","ALONE_TAGS","stripTags","html","doc","document","exclude","tmp","createElement","innerHTML","appendChild","forEach","p","pr","parentNode","isTag","tag","nodeName","toLowerCase","text","before","createTextNode","safeRemove","nx","nextSibling","isText","test","nodeValue","insertBefore","restoreTags","innerText","content","replace","_","isClosed","isSingle"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/html/strip-tags.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { Dom } from \"../../dom/dom.js\";\nimport { isString } from \"../checker/is-string.js\";\nimport { trim } from \"../string/trim.js\";\nimport { $$ } from \"../utils/index.js\";\nconst NEW_LINE_TAGS = new Set([\n    'div',\n    'p',\n    'br',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'hr'\n]);\nconst INVISIBLE_TAGS = new Set(['script', 'style']);\nconst ALONE_TAGS = new Set(['br', 'hr', 'input']);\n/**\n * Extract plain text from HTML text\n */\nexport function stripTags(html, doc = document, exclude = null) {\n    const tmp = doc.createElement('div');\n    if (isString(html)) {\n        tmp.innerHTML = html;\n    }\n    else {\n        tmp.appendChild(html);\n    }\n    $$('*', tmp).forEach(p => {\n        const pr = p.parentNode;\n        if (!pr) {\n            return;\n        }\n        if (exclude && Dom.isTag(p, exclude)) {\n            const tag = p.nodeName.toLowerCase();\n            const text = !Dom.isTag(p, ALONE_TAGS)\n                ? `%%%jodit-${tag}%%%${stripTags(p.innerHTML, doc, exclude)}%%%/jodit-${tag}%%%`\n                : `%%%jodit-single-${tag}%%%`;\n            Dom.before(p, doc.createTextNode(text));\n            Dom.safeRemove(p);\n            return;\n        }\n        if (Dom.isTag(p, INVISIBLE_TAGS)) {\n            Dom.safeRemove(p);\n            return;\n        }\n        if (!Dom.isTag(p, NEW_LINE_TAGS)) {\n            return;\n        }\n        const nx = p.nextSibling;\n        if (Dom.isText(nx) && /^\\s/.test(nx.nodeValue || '')) {\n            return;\n        }\n        if (nx) {\n            pr.insertBefore(doc.createTextNode(' '), nx);\n        }\n    });\n    return restoreTags(trim(tmp.innerText));\n}\nfunction restoreTags(content) {\n    return content.replace(/%%%(\\/)?jodit(-single)?-([\\w\\n]+)%%%/g, (_, isClosed, isSingle, tag) => `<${isClosed ? '/' : ''}${tag}>`);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
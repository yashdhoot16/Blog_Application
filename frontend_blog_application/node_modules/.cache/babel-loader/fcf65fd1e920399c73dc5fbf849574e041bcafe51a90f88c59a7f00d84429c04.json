{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { IS_PROD } from \"../constants.js\";\nimport { eventEmitter } from \"../global.js\";\nimport { splitArray } from \"../helpers/array/index.js\";\nimport { isArray, isDestructable, isString } from \"../helpers/checker/index.js\";\nimport { init } from \"./helpers/init-instance.js\";\nimport { loadExtras } from \"./helpers/load.js\";\nimport { makeInstance } from \"./helpers/make-instance.js\";\nimport { normalizeName } from \"./helpers/utils.js\";\nimport \"./interface.js\";\n/**\n * Jodit plugin system\n * @example\n * ```js\n * Jodit.plugins.add('emoji2', {\n * \tinit() {\n *  \talert('emoji Inited2')\n * \t},\n *\tdestruct() {}\n * });\n * ```\n */\nexport class PluginSystem {\n  constructor() {\n    this.__items = new Map();\n  }\n  get size() {\n    return this.__items.size;\n  }\n  /**\n   * Add plugin in store\n   */\n  add(name, plugin) {\n    this.__items.set(normalizeName(name), plugin);\n    eventEmitter.fire(`plugin:${name}:ready`);\n  }\n  /**\n   * Get plugin from store\n   */\n  get(name) {\n    return this.__items.get(normalizeName(name));\n  }\n  /**\n   * Remove plugin from store\n   */\n  remove(name) {\n    this.__items.delete(normalizeName(name));\n  }\n  __getFullPluginsList(filter) {\n    const results = [];\n    this.__items.forEach((plugin, name) => {\n      if (!filter || filter.has(name)) {\n        results.push([name, plugin]);\n      }\n    });\n    return results;\n  }\n  /**\n   * Public method for async init all plugins\n   */\n  __init(jodit) {\n    const {\n      extraList,\n      disableList,\n      filter\n    } = getSpecialLists(jodit);\n    const doneList = new Map();\n    const pluginsMap = {};\n    const waitingList = new Set();\n    jodit.__plugins = pluginsMap;\n    const initPlugins = () => {\n      if (jodit.isInDestruct) {\n        return;\n      }\n      let commit = false;\n      this.__getFullPluginsList(filter).forEach(([name, plugin]) => {\n        if (disableList.has(name) || doneList.has(name)) {\n          return;\n        }\n        const requires = plugin === null || plugin === void 0 ? void 0 : plugin.requires;\n        if (requires && isArray(requires) && requires.length) {\n          if (requires.some(req => disableList.has(req))) {\n            return;\n          }\n          if (!requires.every(name => doneList.has(name))) {\n            waitingList.add(name);\n            return;\n          }\n        }\n        commit = true;\n        const instance = makeInstance(jodit, plugin);\n        if (!instance) {\n          doneList.set(name, null);\n          waitingList.delete(name);\n          return;\n        }\n        init(jodit, name, plugin, instance, doneList, waitingList);\n        pluginsMap[name] = instance;\n      });\n      if (commit) {\n        jodit.e.fire('updatePlugins');\n        initPlugins();\n      }\n    };\n    if (extraList && extraList.length) {\n      loadExtras(this.__items, jodit, extraList, initPlugins);\n    }\n    initPlugins();\n    bindOnBeforeDestruct(jodit, pluginsMap);\n    if (!IS_PROD && waitingList.size) {\n      console.warn('After init plugin waiting list is not clean:', waitingList);\n    }\n  }\n  /**\n   * Returns the promise to wait for the plugin to load.\n   */\n  wait(name) {\n    return new Promise(resolve => {\n      if (this.get(name)) {\n        return resolve();\n      }\n      const onReady = () => {\n        resolve();\n        eventEmitter.off(`plugin:${name}:ready`, onReady);\n      };\n      eventEmitter.on(`plugin:${name}:ready`, onReady);\n    });\n  }\n}\n/**\n * Destroy all plugins before - Jodit will be destroyed\n */\nfunction bindOnBeforeDestruct(jodit, plugins) {\n  jodit.e.on('beforeDestruct', () => {\n    Object.keys(plugins).forEach(name => {\n      const instance = plugins[name];\n      if (isDestructable(instance)) {\n        instance.destruct(jodit);\n      }\n      delete plugins[name];\n    });\n    delete jodit.__plugins;\n  });\n}\nfunction getSpecialLists(jodit) {\n  const extraList = jodit.o.extraPlugins.map(s => isString(s) ? {\n    name: s\n  } : s);\n  const disableList = new Set(splitArray(jodit.o.disablePlugins).map(normalizeName));\n  const filter = jodit.o.safeMode ? new Set(jodit.o.safePluginsList) : null;\n  return {\n    extraList,\n    disableList,\n    filter\n  };\n}","map":{"version":3,"names":["IS_PROD","eventEmitter","splitArray","isArray","isDestructable","isString","init","loadExtras","makeInstance","normalizeName","PluginSystem","constructor","__items","Map","size","add","name","plugin","set","fire","get","remove","delete","__getFullPluginsList","filter","results","forEach","has","push","__init","jodit","extraList","disableList","getSpecialLists","doneList","pluginsMap","waitingList","Set","__plugins","initPlugins","isInDestruct","commit","requires","length","some","req","every","instance","e","bindOnBeforeDestruct","console","warn","wait","Promise","resolve","onReady","off","on","plugins","Object","keys","destruct","o","extraPlugins","map","s","disablePlugins","safeMode","safePluginsList"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/plugin/plugin-system.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { IS_PROD } from \"../constants.js\";\nimport { eventEmitter } from \"../global.js\";\nimport { splitArray } from \"../helpers/array/index.js\";\nimport { isArray, isDestructable, isString } from \"../helpers/checker/index.js\";\nimport { init } from \"./helpers/init-instance.js\";\nimport { loadExtras } from \"./helpers/load.js\";\nimport { makeInstance } from \"./helpers/make-instance.js\";\nimport { normalizeName } from \"./helpers/utils.js\";\nimport \"./interface.js\";\n/**\n * Jodit plugin system\n * @example\n * ```js\n * Jodit.plugins.add('emoji2', {\n * \tinit() {\n *  \talert('emoji Inited2')\n * \t},\n *\tdestruct() {}\n * });\n * ```\n */\nexport class PluginSystem {\n    constructor() {\n        this.__items = new Map();\n    }\n    get size() {\n        return this.__items.size;\n    }\n    /**\n     * Add plugin in store\n     */\n    add(name, plugin) {\n        this.__items.set(normalizeName(name), plugin);\n        eventEmitter.fire(`plugin:${name}:ready`);\n    }\n    /**\n     * Get plugin from store\n     */\n    get(name) {\n        return this.__items.get(normalizeName(name));\n    }\n    /**\n     * Remove plugin from store\n     */\n    remove(name) {\n        this.__items.delete(normalizeName(name));\n    }\n    __getFullPluginsList(filter) {\n        const results = [];\n        this.__items.forEach((plugin, name) => {\n            if (!filter || filter.has(name)) {\n                results.push([name, plugin]);\n            }\n        });\n        return results;\n    }\n    /**\n     * Public method for async init all plugins\n     */\n    __init(jodit) {\n        const { extraList, disableList, filter } = getSpecialLists(jodit);\n        const doneList = new Map();\n        const pluginsMap = {};\n        const waitingList = new Set();\n        jodit.__plugins = pluginsMap;\n        const initPlugins = () => {\n            if (jodit.isInDestruct) {\n                return;\n            }\n            let commit = false;\n            this.__getFullPluginsList(filter).forEach(([name, plugin]) => {\n                if (disableList.has(name) || doneList.has(name)) {\n                    return;\n                }\n                const requires = plugin === null || plugin === void 0 ? void 0 : plugin.requires;\n                if (requires && isArray(requires) && requires.length) {\n                    if (requires.some(req => disableList.has(req))) {\n                        return;\n                    }\n                    if (!requires.every(name => doneList.has(name))) {\n                        waitingList.add(name);\n                        return;\n                    }\n                }\n                commit = true;\n                const instance = makeInstance(jodit, plugin);\n                if (!instance) {\n                    doneList.set(name, null);\n                    waitingList.delete(name);\n                    return;\n                }\n                init(jodit, name, plugin, instance, doneList, waitingList);\n                pluginsMap[name] = instance;\n            });\n            if (commit) {\n                jodit.e.fire('updatePlugins');\n                initPlugins();\n            }\n        };\n        if (extraList && extraList.length) {\n            loadExtras(this.__items, jodit, extraList, initPlugins);\n        }\n        initPlugins();\n        bindOnBeforeDestruct(jodit, pluginsMap);\n        if (!IS_PROD && waitingList.size) {\n            console.warn('After init plugin waiting list is not clean:', waitingList);\n        }\n    }\n    /**\n     * Returns the promise to wait for the plugin to load.\n     */\n    wait(name) {\n        return new Promise((resolve) => {\n            if (this.get(name)) {\n                return resolve();\n            }\n            const onReady = () => {\n                resolve();\n                eventEmitter.off(`plugin:${name}:ready`, onReady);\n            };\n            eventEmitter.on(`plugin:${name}:ready`, onReady);\n        });\n    }\n}\n/**\n * Destroy all plugins before - Jodit will be destroyed\n */\nfunction bindOnBeforeDestruct(jodit, plugins) {\n    jodit.e.on('beforeDestruct', () => {\n        Object.keys(plugins).forEach(name => {\n            const instance = plugins[name];\n            if (isDestructable(instance)) {\n                instance.destruct(jodit);\n            }\n            delete plugins[name];\n        });\n        delete jodit.__plugins;\n    });\n}\nfunction getSpecialLists(jodit) {\n    const extraList = jodit.o.extraPlugins.map(s => isString(s) ? { name: s } : s);\n    const disableList = new Set(splitArray(jodit.o.disablePlugins).map(normalizeName));\n    const filter = jodit.o.safeMode ? new Set(jodit.o.safePluginsList) : null;\n    return { extraList, disableList, filter };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
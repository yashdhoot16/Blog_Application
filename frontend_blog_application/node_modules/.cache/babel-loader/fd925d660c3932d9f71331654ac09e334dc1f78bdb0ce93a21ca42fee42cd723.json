{"ast":null,"code":"/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { isBoolean } from \"../checker/is-boolean.js\";\nimport { isPlainObject } from \"../checker/is-plain-object.js\";\nimport { normalizeCssNumericValue, normalizeCssValue, NUMBER_FIELDS_REG } from \"../normalize/normalize-css-value.js\";\nimport { camelCase } from \"../string/camel-case.js\";\nimport { kebabCase } from \"../string/kebab-case.js\";\n/**\n * Get the value of a computed style property for the first element in the set of matched elements or set one or\n * more CSS properties for every matched element\n *\n * @param element - HTML element\n * @param key - An object of property-value pairs to set. A CSS property name.\n * @param value - A value to set for the property.\n * @param onlyStyleMode - Get value from style attribute, without calculating\n */\nexport function css(element, key, value, onlyStyleMode = false) {\n  if (isBoolean(value)) {\n    onlyStyleMode = value;\n    value = undefined;\n  }\n  if (isPlainObject(key) || value !== undefined) {\n    const setValue = (elm, _key, _value) => {\n      _value = normalizeCssNumericValue(_key, _value);\n      if (_value !== undefined && (_value == null || css(elm, _key, true) !== normalizeCssValue(_key, _value))) {\n        elm.style[_key] = _value;\n      }\n    };\n    if (isPlainObject(key)) {\n      const keys = Object.keys(key);\n      for (let j = 0; j < keys.length; j += 1) {\n        setValue(element, camelCase(keys[j]), key[keys[j]]);\n      }\n    } else {\n      setValue(element, camelCase(key), value);\n    }\n    return '';\n  }\n  const key2 = kebabCase(key),\n    doc = element.ownerDocument || document,\n    win = doc ? doc.defaultView || doc.parentWindow : false;\n  const currentValue = element.style[key];\n  let result = '';\n  if (currentValue !== undefined && currentValue !== '') {\n    result = currentValue;\n  } else if (win && !onlyStyleMode) {\n    result = win.getComputedStyle(element).getPropertyValue(key2);\n  }\n  if (NUMBER_FIELDS_REG.test(key) && /^[-+]?[0-9.]+px$/.test(result.toString())) {\n    result = parseInt(result.toString(), 10);\n  }\n  return normalizeCssValue(key, result);\n}\n/**\n * Clear center align\n */\nexport const clearCenterAlign = image => {\n  if (css(image, 'display') === 'block') {\n    css(image, 'display', '');\n  }\n  const {\n    style\n  } = image;\n  if (style.marginLeft === 'auto' && style.marginRight === 'auto') {\n    style.marginLeft = '';\n    style.marginRight = '';\n  }\n};","map":{"version":3,"names":["isBoolean","isPlainObject","normalizeCssNumericValue","normalizeCssValue","NUMBER_FIELDS_REG","camelCase","kebabCase","css","element","key","value","onlyStyleMode","undefined","setValue","elm","_key","_value","style","keys","Object","j","length","key2","doc","ownerDocument","document","win","defaultView","parentWindow","currentValue","result","getComputedStyle","getPropertyValue","test","toString","parseInt","clearCenterAlign","image","marginLeft","marginRight"],"sources":["C:/Users/YDHOOT/Documents/Spring Tool Suite Projects/BlogApplication/frontend_blog_application/node_modules/jodit/esm/core/helpers/utils/css.js"],"sourcesContent":["/*!\n * Jodit Editor (https://xdsoft.net/jodit/)\n * Released under MIT see LICENSE.txt in the project root for license information.\n * Copyright (c) 2013-2025 Valeriy Chupurnov. All rights reserved. https://xdsoft.net\n */\nimport { isBoolean } from \"../checker/is-boolean.js\";\nimport { isPlainObject } from \"../checker/is-plain-object.js\";\nimport { normalizeCssNumericValue, normalizeCssValue, NUMBER_FIELDS_REG } from \"../normalize/normalize-css-value.js\";\nimport { camelCase } from \"../string/camel-case.js\";\nimport { kebabCase } from \"../string/kebab-case.js\";\n/**\n * Get the value of a computed style property for the first element in the set of matched elements or set one or\n * more CSS properties for every matched element\n *\n * @param element - HTML element\n * @param key - An object of property-value pairs to set. A CSS property name.\n * @param value - A value to set for the property.\n * @param onlyStyleMode - Get value from style attribute, without calculating\n */\nexport function css(element, key, value, onlyStyleMode = false) {\n    if (isBoolean(value)) {\n        onlyStyleMode = value;\n        value = undefined;\n    }\n    if (isPlainObject(key) || value !== undefined) {\n        const setValue = (elm, _key, _value) => {\n            _value = normalizeCssNumericValue(_key, _value);\n            if (_value !== undefined &&\n                (_value == null ||\n                    css(elm, _key, true) !== normalizeCssValue(_key, _value))) {\n                elm.style[_key] = _value;\n            }\n        };\n        if (isPlainObject(key)) {\n            const keys = Object.keys(key);\n            for (let j = 0; j < keys.length; j += 1) {\n                setValue(element, camelCase(keys[j]), key[keys[j]]);\n            }\n        }\n        else {\n            setValue(element, camelCase(key), value);\n        }\n        return '';\n    }\n    const key2 = kebabCase(key), doc = element.ownerDocument || document, win = doc ? doc.defaultView || doc.parentWindow : false;\n    const currentValue = element.style[key];\n    let result = '';\n    if (currentValue !== undefined && currentValue !== '') {\n        result = currentValue;\n    }\n    else if (win && !onlyStyleMode) {\n        result = win.getComputedStyle(element).getPropertyValue(key2);\n    }\n    if (NUMBER_FIELDS_REG.test(key) &&\n        /^[-+]?[0-9.]+px$/.test(result.toString())) {\n        result = parseInt(result.toString(), 10);\n    }\n    return normalizeCssValue(key, result);\n}\n/**\n * Clear center align\n */\nexport const clearCenterAlign = (image) => {\n    if (css(image, 'display') === 'block') {\n        css(image, 'display', '');\n    }\n    const { style } = image;\n    if (style.marginLeft === 'auto' && style.marginRight === 'auto') {\n        style.marginLeft = '';\n        style.marginRight = '';\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}